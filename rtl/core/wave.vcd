$version Generated by VerilatedVcd $end
$date Tue Nov 29 22:48:06 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 C clk $end
  $var wire  1 E rd_en_i $end
  $var wire  6 F rd_idx_i [5:0] $end
  $var wire 32 G rd_wdata_i [31:0] $end
  $var wire  5 H rs1_idx_i [4:0] $end
  $var wire 32 J rs1_rdata_o [31:0] $end
  $var wire 32 L rs1_x1_rdata_o [31:0] $end
  $var wire  5 I rs2_idx_i [4:0] $end
  $var wire 32 K rs2_rdata_o [31:0] $end
  $var wire  1 D rst_n $end
  $scope module regfile $end
   $var wire  1 C clk $end
   $var wire 32 B i [31:0] $end
   $var wire  1 E rd_en_i $end
   $var wire  6 F rd_idx_i [5:0] $end
   $var wire 32 G rd_wdata_i [31:0] $end
   $var wire 32 # reg_data(1) [31:0] $end
   $var wire 32 , reg_data(10) [31:0] $end
   $var wire 32 - reg_data(11) [31:0] $end
   $var wire 32 . reg_data(12) [31:0] $end
   $var wire 32 / reg_data(13) [31:0] $end
   $var wire 32 0 reg_data(14) [31:0] $end
   $var wire 32 1 reg_data(15) [31:0] $end
   $var wire 32 2 reg_data(16) [31:0] $end
   $var wire 32 3 reg_data(17) [31:0] $end
   $var wire 32 4 reg_data(18) [31:0] $end
   $var wire 32 5 reg_data(19) [31:0] $end
   $var wire 32 $ reg_data(2) [31:0] $end
   $var wire 32 6 reg_data(20) [31:0] $end
   $var wire 32 7 reg_data(21) [31:0] $end
   $var wire 32 8 reg_data(22) [31:0] $end
   $var wire 32 9 reg_data(23) [31:0] $end
   $var wire 32 : reg_data(24) [31:0] $end
   $var wire 32 ; reg_data(25) [31:0] $end
   $var wire 32 < reg_data(26) [31:0] $end
   $var wire 32 = reg_data(27) [31:0] $end
   $var wire 32 > reg_data(28) [31:0] $end
   $var wire 32 ? reg_data(29) [31:0] $end
   $var wire 32 % reg_data(3) [31:0] $end
   $var wire 32 @ reg_data(30) [31:0] $end
   $var wire 32 A reg_data(31) [31:0] $end
   $var wire 32 & reg_data(4) [31:0] $end
   $var wire 32 ' reg_data(5) [31:0] $end
   $var wire 32 ( reg_data(6) [31:0] $end
   $var wire 32 ) reg_data(7) [31:0] $end
   $var wire 32 * reg_data(8) [31:0] $end
   $var wire 32 + reg_data(9) [31:0] $end
   $var wire 32 M reg_num [31:0] $end
   $var wire  5 H rs1_idx_i [4:0] $end
   $var wire 32 J rs1_rdata_o [31:0] $end
   $var wire 32 L rs1_x1_rdata_o [31:0] $end
   $var wire  5 I rs2_idx_i [4:0] $end
   $var wire 32 K rs2_rdata_o [31:0] $end
   $var wire  1 D rst_n $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
0C
1D
1E
b000001 F
b00000000000000000000000000001010 G
b00001 H
b00000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000100000 M
#1
b00000000000000000000000000001010 #
1C
b00000000000000000000000000001010 J
#2
0C
#3
1C
#4
0C
#5
1C
#6
0C
#7
1C
#8
0C
#9
1C
#10
0C
#11
1C
#12
0C
#13
1C
#14
0C
#15
1C
#16
0C
#17
1C
#18
0C
#19
1C
