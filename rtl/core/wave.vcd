$version Generated by VerilatedVcd $end
$date Mon Dec  5 12:00:49 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 n clk $end
  $var wire  1 o rst_n $end
  $scope module riscx $end
   $var wire  1 n clk $end
   $var wire 32 / dec_imm [31:0] $end
   $var wire 32 r dec_instr [31:0] $end
   $var wire 32 q dec_pc [31:0] $end
   $var wire  1 1 dec_rd_en $end
   $var wire  5 0 dec_rd_idx [4:0] $end
   $var wire  1 ) dec_rs1_en $end
   $var wire  5 + dec_rs1_idx [4:0] $end
   $var wire 32 - dec_rs1_rdata [31:0] $end
   $var wire  1 * dec_rs2_en $end
   $var wire  5 , dec_rs2_idx [4:0] $end
   $var wire 32 - dec_rs2_rdata [31:0] $end
   $var wire  1 t ex_pipe_flush $end
   $var wire 32 u ex_pipe_flush_pc [31:0] $end
   $var wire 32 5 id_ex_imm [31:0] $end
   $var wire 32 s id_ex_instr [31:0] $end
   $var wire 32 2 id_ex_pc [31:0] $end
   $var wire  1 6 id_ex_prdt_taken $end
   $var wire  1 8 id_ex_rd_en $end
   $var wire  5 7 id_ex_rd_idx [4:0] $end
   $var wire 32 3 id_ex_rs1_rdata [31:0] $end
   $var wire 32 4 id_ex_rs2_rdata [31:0] $end
   $var wire 32 ( if_id_instr [31:0] $end
   $var wire 32 ' if_id_pc [31:0] $end
   $var wire  1 p if_id_prdt_taken $end
   $var wire 32 % if_instr [31:0] $end
   $var wire 32 $ if_pc [31:0] $end
   $var wire 32 # if_pc_next [31:0] $end
   $var wire  1 & if_prdt_taken $end
   $var wire 32 $ pr_pc [31:0] $end
   $var wire 32 - rf_rs1_rdata [31:0] $end
   $var wire 32 . rf_rs2_rdata [31:0] $end
   $var wire  1 o rst_n $end
   $scope module id_ex_u $end
    $var wire  1 n clk $end
    $var wire 32 / dec_imm_i [31:0] $end
    $var wire 32 r dec_instr_i [31:0] $end
    $var wire 32 q dec_pc_i [31:0] $end
    $var wire  1 1 dec_rd_en_i $end
    $var wire  5 0 dec_rd_idx_i [4:0] $end
    $var wire 32 - dec_rs1_rdata_i [31:0] $end
    $var wire 32 - dec_rs2_rdata_i [31:0] $end
    $var wire 32 5 id_ex_imm_o [31:0] $end
    $var wire 32 s id_ex_instr_o [31:0] $end
    $var wire 32 2 id_ex_pc_o [31:0] $end
    $var wire  1 6 id_ex_prdt_taken_o $end
    $var wire  1 8 id_ex_rd_en_o $end
    $var wire  5 7 id_ex_rd_idx_o [4:0] $end
    $var wire 32 3 id_ex_rs1_rdata_o [31:0] $end
    $var wire 32 4 id_ex_rs2_rdata_o [31:0] $end
    $var wire  1 p if_id_prdt_taken_i $end
    $var wire  1 o rst_n $end
    $var wire  1 v stall_i $end
    $var wire  1 w wen $end
    $scope module alu_fun_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 / din [31:0] $end
     $var wire 32 5 qout [31:0] $end
     $var wire 32 5 qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module alu_op1_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 - din [31:0] $end
     $var wire 32 3 qout [31:0] $end
     $var wire 32 3 qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module alu_op2_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 - din [31:0] $end
     $var wire 32 4 qout [31:0] $end
     $var wire 32 4 qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 r din [31:0] $end
     $var wire 32 2 qout [31:0] $end
     $var wire 32 m qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 q din [31:0] $end
     $var wire 32 2 qout [31:0] $end
     $var wire 32 l qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module prdt_taken_dff $end
     $var wire 32 !! DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire  1 p din [0:0] $end
     $var wire  1 6 qout [0:0] $end
     $var wire  1 6 qout_r [0:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module rd_en_dff $end
     $var wire 32 !! DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire  1 1 din [0:0] $end
     $var wire  1 8 qout [0:0] $end
     $var wire  1 8 qout_r [0:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module rd_idx_dff $end
     $var wire 32 ~ DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire  5 0 din [4:0] $end
     $var wire  5 7 qout [4:0] $end
     $var wire  5 7 qout_r [4:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
   $upscope $end
   $scope module id_u $end
    $var wire 32 / dec_imm_o [31:0] $end
    $var wire 32 r dec_instr_o [31:0] $end
    $var wire 32 q dec_pc_o [31:0] $end
    $var wire  1 1 dec_rd_en_o $end
    $var wire  5 0 dec_rd_idx_o [4:0] $end
    $var wire  1 ) dec_rs1_en_o $end
    $var wire  5 + dec_rs1_idx_o [4:0] $end
    $var wire 32 - dec_rs1_rdata_o [31:0] $end
    $var wire  1 * dec_rs2_en_o $end
    $var wire  5 , dec_rs2_idx_o [4:0] $end
    $var wire 32 - dec_rs2_rdata_o [31:0] $end
    $var wire  3 J fun3 [2:0] $end
    $var wire  7 K fun7 [6:0] $end
    $var wire 32 ( instr_i [31:0] $end
    $var wire  7 I opcode [6:0] $end
    $var wire 32 ' pc_i [31:0] $end
    $var wire  5 0 rd [4:0] $end
    $var wire  5 + rs1 [4:0] $end
    $var wire 32 - rs1_rdata_i [31:0] $end
    $var wire  5 , rs2 [4:0] $end
    $var wire 32 - rs2_rdata_i [31:0] $end
   $upscope $end
   $scope module if_id_u $end
    $var wire  1 n clk $end
    $var wire 32 ( if_id_instr_o [31:0] $end
    $var wire 32 ' if_id_pc_o [31:0] $end
    $var wire  1 p if_id_prdt_taken_o $end
    $var wire 32 % if_instr_i [31:0] $end
    $var wire 32 $ if_pc_i [31:0] $end
    $var wire  1 & if_prdt_taken_i $end
    $var wire  1 o rst_n $end
    $var wire  1 v stall_i $end
    $var wire  1 w wen $end
    $scope module instr_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 % din [31:0] $end
     $var wire 32 ( qout [31:0] $end
     $var wire 32 ( qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 $ din [31:0] $end
     $var wire 32 ' qout [31:0] $end
     $var wire 32 ' qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
   $upscope $end
   $scope module if_u $end
    $var wire  1 : dec_bjp $end
    $var wire 32 ? dec_bjp_imm [31:0] $end
    $var wire  1 ; dec_bxx $end
    $var wire  1 < dec_jal $end
    $var wire  1 = dec_jalr $end
    $var wire  5 > dec_jalr_rs1_idx [4:0] $end
    $var wire 32 % if_instr_o [31:0] $end
    $var wire 32 # if_pc_next_o [31:0] $end
    $var wire 32 $ if_pc_o [31:0] $end
    $var wire  1 & if_prdt_taken_o $end
    $var wire 32 $ if_req_pc [31:0] $end
    $var wire  1 w if_req_ready $end
    $var wire  1 w if_req_valid $end
    $var wire  1 v if_resp_err $end
    $var wire 32 % if_resp_instr [31:0] $end
    $var wire  1 w if_resp_ready $end
    $var wire  1 w if_resp_valid $end
    $var wire 32 % instr [31:0] $end
    $var wire  1 @ jalr_rs1_x0 $end
    $var wire  1 A jalr_rs1_x1 $end
    $var wire 32 C pc_add_op1 [31:0] $end
    $var wire 32 D pc_add_op2 [31:0] $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 32 B prdt_pc_add_op1 [31:0] $end
    $var wire 32 ? prdt_pc_add_op2 [31:0] $end
    $var wire  1 & prdt_taken $end
    $scope module fetch_if2icb_u $end
     $var wire 32 $ if_req_pc_i [31:0] $end
     $var wire  1 w if_req_ready_o $end
     $var wire  1 w if_req_valid_i $end
     $var wire  1 v if_resp_err_o $end
     $var wire 32 % if_resp_instr_o [31:0] $end
     $var wire  1 w if_resp_ready_i $end
     $var wire  1 w if_resp_valid_o $end
     $var wire 32 % instr [31:0] $end
     $var wire 32 $ pc [31:0] $end
    $upscope $end
    $scope module mini_dec_u $end
     $var wire 32 F bjp_imm_bxx [31:0] $end
     $var wire 32 G bjp_imm_jal [31:0] $end
     $var wire 32 H bjp_imm_jalr [31:0] $end
     $var wire 32 ? dec_bjp_imm_o [31:0] $end
     $var wire  1 : dec_bjp_o $end
     $var wire  1 ; dec_bxx_o $end
     $var wire  1 < dec_jal_o $end
     $var wire  1 = dec_jalr_o $end
     $var wire  5 > dec_jalr_rs1_idx_o [4:0] $end
     $var wire 32 % instr_i [31:0] $end
     $var wire  7 E opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module pc_reg_u $end
    $var wire  1 n clk $end
    $var wire 32 9 pc_din [31:0] $end
    $var wire 32 # pc_next_i [31:0] $end
    $var wire 32 $ pc_o [31:0] $end
    $var wire  1 t pipe_flush_i $end
    $var wire 32 u pipe_flush_pc_i [31:0] $end
    $var wire  1 o rst_n $end
    $var wire  1 v stall_i $end
    $var wire  1 w wen $end
    $scope module pc_dff $end
     $var wire 32 x DW [31:0] $end
     $var wire 32 y RESET_VAL [31:0] $end
     $var wire  1 n clk $end
     $var wire 32 9 din [31:0] $end
     $var wire 32 $ qout [31:0] $end
     $var wire 32 $ qout_r [31:0] $end
     $var wire  1 o rst_n $end
     $var wire  1 w wen $end
    $upscope $end
   $upscope $end
   $scope module regfile_u $end
    $var wire  1 n clk $end
    $var wire 32 k i [31:0] $end
    $var wire  1 z rd_en_i $end
    $var wire  5 { rd_idx_i [4:0] $end
    $var wire 32 | rd_wdata_i [31:0] $end
    $var wire 32 L reg_data(1) [31:0] $end
    $var wire 32 U reg_data(10) [31:0] $end
    $var wire 32 V reg_data(11) [31:0] $end
    $var wire 32 W reg_data(12) [31:0] $end
    $var wire 32 X reg_data(13) [31:0] $end
    $var wire 32 Y reg_data(14) [31:0] $end
    $var wire 32 Z reg_data(15) [31:0] $end
    $var wire 32 [ reg_data(16) [31:0] $end
    $var wire 32 \ reg_data(17) [31:0] $end
    $var wire 32 ] reg_data(18) [31:0] $end
    $var wire 32 ^ reg_data(19) [31:0] $end
    $var wire 32 M reg_data(2) [31:0] $end
    $var wire 32 _ reg_data(20) [31:0] $end
    $var wire 32 ` reg_data(21) [31:0] $end
    $var wire 32 a reg_data(22) [31:0] $end
    $var wire 32 b reg_data(23) [31:0] $end
    $var wire 32 c reg_data(24) [31:0] $end
    $var wire 32 d reg_data(25) [31:0] $end
    $var wire 32 e reg_data(26) [31:0] $end
    $var wire 32 f reg_data(27) [31:0] $end
    $var wire 32 g reg_data(28) [31:0] $end
    $var wire 32 h reg_data(29) [31:0] $end
    $var wire 32 N reg_data(3) [31:0] $end
    $var wire 32 i reg_data(30) [31:0] $end
    $var wire 32 j reg_data(31) [31:0] $end
    $var wire 32 O reg_data(4) [31:0] $end
    $var wire 32 P reg_data(5) [31:0] $end
    $var wire 32 Q reg_data(6) [31:0] $end
    $var wire 32 R reg_data(7) [31:0] $end
    $var wire 32 S reg_data(8) [31:0] $end
    $var wire 32 T reg_data(9) [31:0] $end
    $var wire 32 x reg_num [31:0] $end
    $var wire  1 ) rs1_en_i $end
    $var wire  5 + rs1_idx_i [4:0] $end
    $var wire 32 - rs1_rdata_o [31:0] $end
    $var wire 32 } rs1_x1_rdata_o [31:0] $end
    $var wire  1 * rs2_en_i $end
    $var wire  5 , rs2_idx_i [4:0] $end
    $var wire 32 . rs2_rdata_o [31:0] $end
    $var wire  1 o rst_n $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000100 #
b00000000000000000000000000000000 $
b00000000000100110000001100010011 %
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000 0
01
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
06
b00000 7
08
b00000000000000000000000000000100 9
0:
0;
0<
0=
b00110 >
b00000000000000000000000000000000 ?
0@
0A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000100 D
b0010011 E
b00000000000000000000000000000110 F
b00000000000000110000100000000000 G
b00000000000000000000000000000001 H
b0000000 I
b000 J
b0000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
1n
1o
0p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
0t
b00000000000000000000000000000000 u
0v
1w
b00000000000000000000000000100000 x
b00000000000000000000000000000000 y
0z
b00000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000101 ~
b00000000000000000000000000000001 !!
#1
0n
#2
b00000000000000000000000000001000 #
b00000000000000000000000000000100 $
b00000000001000111000001110010011 %
b00000000000100110000001100010011 (
1)
b00110 +
b00001 ,
b00000000000000000000000000000001 /
b00110 0
11
b00000000000000000000000000001000 9
b00111 >
b00000000000000000000000000000100 B
b00000000000000000000000000000100 C
b00000000000000000000100000000110 F
b00000000000000111000000000000010 G
b00000000000000000000000000000010 H
b0010011 I
1n
#3
0n
#4
b00000000000000000000000000001100 #
b00000000000000000000000000001000 $
b00000000011100110000001010110011 %
b00000000000000000000000000000100 '
b00000000001000111000001110010011 (
b00111 +
b00010 ,
b00000000000000000000000000000010 /
b00111 0
b00000000000000000000000000000001 5
b00110 7
18
b00000000000000000000000000001100 9
b00110 >
b00000000000000000000000000001000 B
b00000000000000000000000000001000 C
b0110011 E
b00000000000000000000100000000100 F
b00000000000000110000100000000110 G
b00000000000000000000000000000111 H
1n
#5
0n
#6
b00000000000000000000000000010000 #
b00000000000000000000000000001100 $
b00000000000000000000000000000000 %
b00000000000000000000000000001000 '
b00000000011100110000001010110011 (
1*
b00110 +
b00111 ,
b00000000000000000000000000000000 /
b00101 0
b00000000000000000000000000000010 5
b00111 7
b00000000000000000000000000010000 9
b00000 >
1@
b00000000000000000000000000001100 B
b00000000000000000000000000001100 C
b0000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b0110011 I
1n
#7
0n
#8
b00000000000000000000000000010100 #
b00000000000000000000000000010000 $
b00000000000000000000000000001100 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000 0
01
b00000000000000000000000000000000 5
b00101 7
b00000000000000000000000000010100 9
b00000000000000000000000000010000 B
b00000000000000000000000000010000 C
b0000000 I
1n
#9
0n
#10
b00000000000000000000000000011000 #
b00000000000000000000000000010100 $
b00000000000000000000000000010000 '
b00000 7
08
b00000000000000000000000000011000 9
b00000000000000000000000000010100 B
b00000000000000000000000000010100 C
1n
#11
0n
#12
b00000000000000000000000000011100 #
b00000000000000000000000000011000 $
b00000000000000000000000000010100 '
b00000000000000000000000000011100 9
b00000000000000000000000000011000 B
b00000000000000000000000000011000 C
1n
#13
0n
#14
b00000000000000000000000000100000 #
b00000000000000000000000000011100 $
b00000000000000000000000000011000 '
b00000000000000000000000000100000 9
b00000000000000000000000000011100 B
b00000000000000000000000000011100 C
1n
#15
0n
#16
b00000000000000000000000000100100 #
b00000000000000000000000000100000 $
b00000000000000000000000000011100 '
b00000000000000000000000000100100 9
b00000000000000000000000000100000 B
b00000000000000000000000000100000 C
1n
#17
0n
#18
b00000000000000000000000000101000 #
b00000000000000000000000000100100 $
b00000000000000000000000000100000 '
b00000000000000000000000000101000 9
b00000000000000000000000000100100 B
b00000000000000000000000000100100 C
1n
#19
0n
