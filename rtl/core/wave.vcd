$version Generated by VerilatedVcd $end
$date Thu Dec  1 19:33:06 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 g clk $end
  $var wire  1 h rst_n $end
  $scope module riscx $end
   $var wire  1 g clk $end
   $var wire  1 ( dec_rs1_en $end
   $var wire  5 * dec_rs1_idx [4:0] $end
   $var wire  1 ) dec_rs2_en $end
   $var wire  5 + dec_rs2_idx [4:0] $end
   $var wire 32 ' if_id_instr [31:0] $end
   $var wire 32 & if_id_pc [31:0] $end
   $var wire 32 % if_instr [31:0] $end
   $var wire 32 $ if_pc [31:0] $end
   $var wire 32 # if_pc_next [31:0] $end
   $var wire 32 $ pr_pc [31:0] $end
   $var wire 32 , rf_rs1_rdata [31:0] $end
   $var wire 32 - rf_rs2_rdata [31:0] $end
   $var wire  1 h rst_n $end
   $scope module id_u $end
    $var wire  4 B dec_alu_fun_o [3:0] $end
    $var wire 32 @ dec_alu_op1_o [31:0] $end
    $var wire 32 A dec_alu_op2_o [31:0] $end
    $var wire 32 F dec_imm_o [31:0] $end
    $var wire 32 m dec_instr_o [31:0] $end
    $var wire 32 l dec_pc_o [31:0] $end
    $var wire  1 ? dec_rd_en_o $end
    $var wire  5 > dec_rd_idx_o [4:0] $end
    $var wire  1 ( dec_rs1_en_o $end
    $var wire  5 * dec_rs1_idx_o [4:0] $end
    $var wire  1 ) dec_rs2_en_o $end
    $var wire  5 + dec_rs2_idx_o [4:0] $end
    $var wire  3 D fun3 [2:0] $end
    $var wire  7 E fun7 [6:0] $end
    $var wire 32 ' instr_i [31:0] $end
    $var wire  7 C opcode [6:0] $end
    $var wire 32 & pc_i [31:0] $end
    $var wire  5 > rd [4:0] $end
    $var wire  5 * rs1 [4:0] $end
    $var wire 32 , rs1_rdata_i [31:0] $end
    $var wire  5 + rs2 [4:0] $end
    $var wire 32 , rs2_rdata_i [31:0] $end
   $upscope $end
   $scope module if_id_u $end
    $var wire  1 g clk $end
    $var wire 32 ' if_id_instr_o [31:0] $end
    $var wire 32 & if_id_pc_o [31:0] $end
    $var wire 32 % if_instr_i [31:0] $end
    $var wire 32 $ if_pc_i [31:0] $end
    $var wire  1 h rst_n $end
    $var wire  1 i stall_i $end
    $scope module instr_dff_lr $end
     $var wire 32 k DW [31:0] $end
     $var wire  1 g clk $end
     $var wire 32 % din [31:0] $end
     $var wire  1 j ld_en $end
     $var wire 32 ' qout [31:0] $end
     $var wire 32 ' qout_r [31:0] $end
     $var wire  1 h rst_n $end
    $upscope $end
    $scope module pc_dff_lr $end
     $var wire 32 k DW [31:0] $end
     $var wire  1 g clk $end
     $var wire 32 $ din [31:0] $end
     $var wire  1 j ld_en $end
     $var wire 32 & qout [31:0] $end
     $var wire 32 & qout_r [31:0] $end
     $var wire  1 h rst_n $end
    $upscope $end
   $upscope $end
   $scope module if_u $end
    $var wire  1 . dec_bjp $end
    $var wire 32 3 dec_bjp_imm [31:0] $end
    $var wire  1 / dec_bxx $end
    $var wire  1 0 dec_jal $end
    $var wire  1 1 dec_jalr $end
    $var wire  5 2 dec_jalr_rs1_idx [4:0] $end
    $var wire 32 % if_instr_o [31:0] $end
    $var wire 32 # if_pc_next_o [31:0] $end
    $var wire 32 $ if_pc_o [31:0] $end
    $var wire 32 $ if_req_pc [31:0] $end
    $var wire  1 j if_req_ready $end
    $var wire  1 j if_req_valid $end
    $var wire  1 i if_resp_err $end
    $var wire 32 % if_resp_instr [31:0] $end
    $var wire  1 j if_resp_ready $end
    $var wire  1 j if_resp_valid $end
    $var wire 32 % instr [31:0] $end
    $var wire  1 5 jalr_rs1_x0 $end
    $var wire  1 6 jalr_rs1_x1 $end
    $var wire 32 8 pc_add_op1 [31:0] $end
    $var wire 32 9 pc_add_op2 [31:0] $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 32 7 prdt_pc_add_op1 [31:0] $end
    $var wire 32 3 prdt_pc_add_op2 [31:0] $end
    $var wire  1 4 prdt_taken $end
    $scope module fetch_if2icb_u $end
     $var wire 32 $ if_req_pc_i [31:0] $end
     $var wire  1 j if_req_ready_o $end
     $var wire  1 j if_req_valid_i $end
     $var wire  1 i if_resp_err_o $end
     $var wire 32 % if_resp_instr_o [31:0] $end
     $var wire  1 j if_resp_ready_i $end
     $var wire  1 j if_resp_valid_o $end
     $var wire 32 % instr [31:0] $end
     $var wire 32 $ pc [31:0] $end
    $upscope $end
    $scope module mini_dec_u $end
     $var wire 32 ; bjp_imm_bxx [31:0] $end
     $var wire 32 < bjp_imm_jal [31:0] $end
     $var wire 32 = bjp_imm_jalr [31:0] $end
     $var wire 32 3 dec_bjp_imm_o [31:0] $end
     $var wire  1 . dec_bjp_o $end
     $var wire  1 / dec_bxx_o $end
     $var wire  1 0 dec_jal_o $end
     $var wire  1 1 dec_jalr_o $end
     $var wire  5 2 dec_jalr_rs1_idx_o [4:0] $end
     $var wire 32 % instr_i [31:0] $end
     $var wire  7 : opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module pc_reg_u $end
    $var wire  1 g clk $end
    $var wire 32 # pc_next_i [31:0] $end
    $var wire 32 $ pc_o [31:0] $end
    $var wire 32 $ pc_r [31:0] $end
    $var wire  1 h rst_n $end
    $var wire  1 i stall_i $end
   $upscope $end
   $scope module regfile_u $end
    $var wire  1 g clk $end
    $var wire 32 f i [31:0] $end
    $var wire  1 n rd_en_i $end
    $var wire  5 o rd_idx_i [4:0] $end
    $var wire 32 p rd_wdata_i [31:0] $end
    $var wire 32 G reg_data(1) [31:0] $end
    $var wire 32 P reg_data(10) [31:0] $end
    $var wire 32 Q reg_data(11) [31:0] $end
    $var wire 32 R reg_data(12) [31:0] $end
    $var wire 32 S reg_data(13) [31:0] $end
    $var wire 32 T reg_data(14) [31:0] $end
    $var wire 32 U reg_data(15) [31:0] $end
    $var wire 32 V reg_data(16) [31:0] $end
    $var wire 32 W reg_data(17) [31:0] $end
    $var wire 32 X reg_data(18) [31:0] $end
    $var wire 32 Y reg_data(19) [31:0] $end
    $var wire 32 H reg_data(2) [31:0] $end
    $var wire 32 Z reg_data(20) [31:0] $end
    $var wire 32 [ reg_data(21) [31:0] $end
    $var wire 32 \ reg_data(22) [31:0] $end
    $var wire 32 ] reg_data(23) [31:0] $end
    $var wire 32 ^ reg_data(24) [31:0] $end
    $var wire 32 _ reg_data(25) [31:0] $end
    $var wire 32 ` reg_data(26) [31:0] $end
    $var wire 32 a reg_data(27) [31:0] $end
    $var wire 32 b reg_data(28) [31:0] $end
    $var wire 32 c reg_data(29) [31:0] $end
    $var wire 32 I reg_data(3) [31:0] $end
    $var wire 32 d reg_data(30) [31:0] $end
    $var wire 32 e reg_data(31) [31:0] $end
    $var wire 32 J reg_data(4) [31:0] $end
    $var wire 32 K reg_data(5) [31:0] $end
    $var wire 32 L reg_data(6) [31:0] $end
    $var wire 32 M reg_data(7) [31:0] $end
    $var wire 32 N reg_data(8) [31:0] $end
    $var wire 32 O reg_data(9) [31:0] $end
    $var wire 32 k reg_num [31:0] $end
    $var wire  1 ( rs1_en_i $end
    $var wire  5 * rs1_idx_i [4:0] $end
    $var wire 32 , rs1_rdata_o [31:0] $end
    $var wire 32 q rs1_x1_rdata_o [31:0] $end
    $var wire  1 ) rs2_en_i $end
    $var wire  5 + rs2_idx_i [4:0] $end
    $var wire 32 - rs2_rdata_o [31:0] $end
    $var wire  1 h rst_n $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000100 #
b00000000000000000000000000000000 $
b00000000000100110000001100010011 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
0(
0)
b00000 *
b00000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
0.
0/
00
01
b00110 2
b00000000000000000000000000000000 3
04
05
06
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000100 9
b0010011 :
b00000000000000000000000000000110 ;
b00000000000000110000100000000000 <
b00000000000000000000000000000001 =
b00000 >
0?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b0000 B
b0000000 C
b000 D
b0000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
1g
1h
0i
1j
b00000000000000000000000000100000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
0n
b00000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
#1
0g
#2
b00000000000000000000000000001000 #
b00000000000000000000000000000100 $
b00000000001000111000001110010011 %
b00000000000100110000001100010011 '
1(
b00110 *
b00001 +
b00111 2
b00000000000000000000000000000100 7
b00000000000000000000000000000100 8
b00000000000000000000100000000110 ;
b00000000000000111000000000000010 <
b00000000000000000000000000000010 =
b00110 >
1?
b00000000000000000000000000000001 A
b0010011 C
b00000000000000000000000000000001 F
1g
#3
0g
#4
b00000000000000000000000000001100 #
b00000000000000000000000000001000 $
b00000000011100110000001010110011 %
b00000000000000000000000000000100 &
b00000000001000111000001110010011 '
b00111 *
b00010 +
b00110 2
b00000000000000000000000000001000 7
b00000000000000000000000000001000 8
b0110011 :
b00000000000000000000100000000100 ;
b00000000000000110000100000000110 <
b00000000000000000000000000000111 =
b00111 >
b00000000000000000000000000000010 A
b00000000000000000000000000000010 F
1g
#5
0g
#6
b00000000000000000000000000010000 #
b00000000000000000000000000001100 $
b00000000000000000000000000000000 %
b00000000000000000000000000001000 &
b00000000011100110000001010110011 '
1)
b00110 *
b00111 +
b00000 2
15
b00000000000000000000000000001100 7
b00000000000000000000000000001100 8
b0000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00101 >
b00000000000000000000000000000000 A
b0110011 C
b00000000000000000000000000000000 F
1g
#7
0g
#8
b00000000000000000000000000010100 #
b00000000000000000000000000010000 $
b00000000000000000000000000001100 &
b00000000000000000000000000000000 '
0(
0)
b00000 *
b00000 +
b00000000000000000000000000010000 7
b00000000000000000000000000010000 8
b00000 >
0?
b0000000 C
1g
#9
0g
#10
b00000000000000000000000000011000 #
b00000000000000000000000000010100 $
b00000000000000000000000000010000 &
b00000000000000000000000000010100 7
b00000000000000000000000000010100 8
1g
#11
0g
#12
b00000000000000000000000000011100 #
b00000000000000000000000000011000 $
b00000000000000000000000000010100 &
b00000000000000000000000000011000 7
b00000000000000000000000000011000 8
1g
#13
0g
#14
b00000000000000000000000000100000 #
b00000000000000000000000000011100 $
b00000000000000000000000000011000 &
b00000000000000000000000000011100 7
b00000000000000000000000000011100 8
1g
#15
0g
#16
b00000000000000000000000000100100 #
b00000000000000000000000000100000 $
b00000000000000000000000000011100 &
b00000000000000000000000000100000 7
b00000000000000000000000000100000 8
1g
#17
0g
#18
b00000000000000000000000000101000 #
b00000000000000000000000000100100 $
b00000000000000000000000000100000 &
b00000000000000000000000000100100 7
b00000000000000000000000000100100 8
1g
#19
0g
