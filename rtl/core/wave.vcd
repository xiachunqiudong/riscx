$version Generated by VerilatedVcd $end
$date Tue Dec  6 17:57:49 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 P! clk $end
  $var wire  1 Q! rst_n $end
  $scope module riscx $end
   $var wire  1 P! clk $end
   $var wire 32 1 dec_imm [31:0] $end
   $var wire 32 ( dec_instr [31:0] $end
   $var wire 32 ' dec_pc [31:0] $end
   $var wire  1 3 dec_rd_en $end
   $var wire  5 2 dec_rd_idx [4:0] $end
   $var wire  1 ) dec_rs1_en $end
   $var wire  5 + dec_rs1_idx [4:0] $end
   $var wire 32 / dec_rs1_rdata [31:0] $end
   $var wire  1 * dec_rs2_en $end
   $var wire  5 , dec_rs2_idx [4:0] $end
   $var wire 32 0 dec_rs2_rdata [31:0] $end
   $var wire 32 = ex_alu_res [31:0] $end
   $var wire  1 S! ex_pipe_flush $end
   $var wire 32 < ex_pipe_flush_pc [31:0] $end
   $var wire  1 ? ex_rd_en $end
   $var wire  5 > ex_rd_idx [4:0] $end
   $var wire 32 = ex_rd_wdata [31:0] $end
   $var wire 32 8 id_ex_imm [31:0] $end
   $var wire 32 5 id_ex_instr [31:0] $end
   $var wire 32 4 id_ex_pc [31:0] $end
   $var wire  1 9 id_ex_prdt_taken $end
   $var wire  1 ; id_ex_rd_en $end
   $var wire  5 : id_ex_rd_idx [4:0] $end
   $var wire 32 6 id_ex_rs1_rdata [31:0] $end
   $var wire 32 7 id_ex_rs2_rdata [31:0] $end
   $var wire 32 ( if_id_instr [31:0] $end
   $var wire 32 ' if_id_pc [31:0] $end
   $var wire  1 R! if_id_prdt_taken $end
   $var wire 32 % if_instr [31:0] $end
   $var wire 32 $ if_pc [31:0] $end
   $var wire 32 # if_pc_next [31:0] $end
   $var wire  1 & if_prdt_taken $end
   $var wire 32 $ pr_pc [31:0] $end
   $var wire 32 - rf_rs1_rdata [31:0] $end
   $var wire 32 . rf_rs2_rdata [31:0] $end
   $var wire  1 Q! rst_n $end
   $scope module ex_u $end
    $var wire 32 9! add_res [31:0] $end
    $var wire  1 z al $end
    $var wire  1 "! al_ali $end
    $var wire  1 { ali $end
    $var wire 32 7! alu_op1 [31:0] $end
    $var wire 32 8! alu_op2 [31:0] $end
    $var wire 32 ;! and_res [31:0] $end
    $var wire  1 !! auipc $end
    $var wire  1 ?! beq $end
    $var wire  1 G! beq_res $end
    $var wire  1 B! bge $end
    $var wire  1 J! bge_res $end
    $var wire  1 D! bgeu $end
    $var wire  1 L! bgeu_res $end
    $var wire  1 A! blt $end
    $var wire  1 I! blt_res $end
    $var wire  1 C! bltu $end
    $var wire  1 K! bltu_res $end
    $var wire  1 @! bne $end
    $var wire  1 H! bne_res $end
    $var wire  1 } branch $end
    $var wire  1 M! branch_res $end
    $var wire  1 } bxx $end
    $var wire 32 = ex_alu_res_o [31:0] $end
    $var wire  1 S! ex_pipe_flush_o $end
    $var wire 32 < ex_pipe_flush_pc_o [31:0] $end
    $var wire  1 ? ex_rd_en_o $end
    $var wire  5 > ex_rd_idx_o [4:0] $end
    $var wire 32 = ex_rd_wdata_o [31:0] $end
    $var wire  3 x fun3 [2:0] $end
    $var wire  7 y fun7 [6:0] $end
    $var wire  1 #! fun_add $end
    $var wire  1 ,! fun_and $end
    $var wire  1 +! fun_or $end
    $var wire  1 %! fun_sll $end
    $var wire  1 &! fun_slt $end
    $var wire  1 '! fun_sltu $end
    $var wire  1 *! fun_sra $end
    $var wire  1 )! fun_srl $end
    $var wire  1 $! fun_sub $end
    $var wire  1 (! fun_xor $end
    $var wire 32 8 imm_i [31:0] $end
    $var wire 32 5 instr_i [31:0] $end
    $var wire  1 | ld_st $end
    $var wire  1 F! lt $end
    $var wire  1 ~ lui $end
    $var wire  1 E! neq $end
    $var wire  1 -! op_add $end
    $var wire  1 2! op_and $end
    $var wire  1 3! op_or $end
    $var wire  1 /! op_sll $end
    $var wire  1 5! op_slt $end
    $var wire  1 6! op_sltu $end
    $var wire  1 1! op_sra $end
    $var wire  1 0! op_srl $end
    $var wire  1 .! op_sub $end
    $var wire  1 4! op_xor $end
    $var wire  7 w opcode [6:0] $end
    $var wire 32 <! or_res [31:0] $end
    $var wire 32 4 pc_i [31:0] $end
    $var wire  1 N! pipe_flush $end
    $var wire 32 4 pipe_flush_pc_op1 [31:0] $end
    $var wire 32 O! pipe_flush_pc_op2 [31:0] $end
    $var wire  1 9 prdt_taken $end
    $var wire  5 > rd [4:0] $end
    $var wire  1 ; rd_en_i $end
    $var wire  5 : rd_idx_i [4:0] $end
    $var wire 32 6 rs1_rdata_i [31:0] $end
    $var wire 32 7 rs2_rdata_i [31:0] $end
    $var wire 32 ^! sll_res [31:0] $end
    $var wire 32 >! slt_res [31:0] $end
    $var wire 32 >! sltu_res [31:0] $end
    $var wire 32 `! sra_res [31:0] $end
    $var wire 32 _! srl_res [31:0] $end
    $var wire 32 :! sub_res [31:0] $end
    $var wire 32 =! xor_res [31:0] $end
   $upscope $end
   $scope module id_ex_u $end
    $var wire  1 P! clk $end
    $var wire 32 1 dec_imm_i [31:0] $end
    $var wire 32 ( dec_instr_i [31:0] $end
    $var wire 32 ' dec_pc_i [31:0] $end
    $var wire  1 3 dec_rd_en_i $end
    $var wire  5 2 dec_rd_idx_i [4:0] $end
    $var wire 32 / dec_rs1_rdata_i [31:0] $end
    $var wire 32 0 dec_rs2_rdata_i [31:0] $end
    $var wire 32 8 id_ex_imm_o [31:0] $end
    $var wire 32 5 id_ex_instr_o [31:0] $end
    $var wire 32 4 id_ex_pc_o [31:0] $end
    $var wire  1 9 id_ex_prdt_taken_o $end
    $var wire  1 ; id_ex_rd_en_o $end
    $var wire  5 : id_ex_rd_idx_o [4:0] $end
    $var wire 32 6 id_ex_rs1_rdata_o [31:0] $end
    $var wire 32 7 id_ex_rs2_rdata_o [31:0] $end
    $var wire  1 R! if_id_prdt_taken_i $end
    $var wire  1 Q! rst_n $end
    $var wire  1 T! stall_i $end
    $var wire  1 U! wen $end
    $scope module alu_fun_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 1 din [31:0] $end
     $var wire 32 8 qout [31:0] $end
     $var wire 32 8 qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module alu_op1_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 / din [31:0] $end
     $var wire 32 6 qout [31:0] $end
     $var wire 32 6 qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module alu_op2_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 0 din [31:0] $end
     $var wire 32 7 qout [31:0] $end
     $var wire 32 7 qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 ( din [31:0] $end
     $var wire 32 5 qout [31:0] $end
     $var wire 32 5 qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 ' din [31:0] $end
     $var wire 32 4 qout [31:0] $end
     $var wire 32 4 qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module prdt_taken_dff $end
     $var wire 32 ]! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire  1 R! din [0:0] $end
     $var wire  1 9 qout [0:0] $end
     $var wire  1 9 qout_r [0:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module rd_en_dff $end
     $var wire 32 ]! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire  1 3 din [0:0] $end
     $var wire  1 ; qout [0:0] $end
     $var wire  1 ; qout_r [0:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module rd_idx_dff $end
     $var wire 32 \! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire  5 2 din [4:0] $end
     $var wire  5 : qout [4:0] $end
     $var wire  5 : qout_r [4:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
   $upscope $end
   $scope module id_u $end
    $var wire 32 1 dec_imm_o [31:0] $end
    $var wire 32 ( dec_instr_o [31:0] $end
    $var wire 32 ' dec_pc_o [31:0] $end
    $var wire  1 3 dec_rd_en_o $end
    $var wire  5 2 dec_rd_idx_o [4:0] $end
    $var wire  1 ) dec_rs1_en_o $end
    $var wire  5 + dec_rs1_idx_o [4:0] $end
    $var wire 32 / dec_rs1_rdata_o [31:0] $end
    $var wire  1 * dec_rs2_en_o $end
    $var wire  5 , dec_rs2_idx_o [4:0] $end
    $var wire 32 0 dec_rs2_rdata_o [31:0] $end
    $var wire  1 ? ex_rd_en_i $end
    $var wire  5 > ex_rd_idx_i [4:0] $end
    $var wire 32 = ex_rd_wdata_i [31:0] $end
    $var wire  3 U fun3 [2:0] $end
    $var wire  7 V fun7 [6:0] $end
    $var wire 32 ( instr_i [31:0] $end
    $var wire  7 T opcode [6:0] $end
    $var wire 32 ' pc_i [31:0] $end
    $var wire  5 2 rd [4:0] $end
    $var wire  5 + rs1 [4:0] $end
    $var wire  1 R rs1_ex_fwd $end
    $var wire  1 P rs1_not_x0 $end
    $var wire 32 - rs1_rdata_i [31:0] $end
    $var wire  5 , rs2 [4:0] $end
    $var wire  1 S rs2_ex_fwd $end
    $var wire  1 Q rs2_not_x0 $end
    $var wire 32 - rs2_rdata_i [31:0] $end
   $upscope $end
   $scope module if_id_u $end
    $var wire  1 P! clk $end
    $var wire 32 ( if_id_instr_o [31:0] $end
    $var wire 32 ' if_id_pc_o [31:0] $end
    $var wire  1 R! if_id_prdt_taken_o $end
    $var wire 32 % if_instr_i [31:0] $end
    $var wire 32 $ if_pc_i [31:0] $end
    $var wire  1 & if_prdt_taken_i $end
    $var wire  1 Q! rst_n $end
    $var wire  1 T! stall_i $end
    $var wire  1 U! wen $end
    $scope module instr_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 % din [31:0] $end
     $var wire 32 ( qout [31:0] $end
     $var wire 32 ( qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 $ din [31:0] $end
     $var wire 32 ' qout [31:0] $end
     $var wire 32 ' qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
   $upscope $end
   $scope module if_u $end
    $var wire  1 A dec_bjp $end
    $var wire 32 F dec_bjp_imm [31:0] $end
    $var wire  1 B dec_bxx $end
    $var wire  1 C dec_jal $end
    $var wire  1 D dec_jalr $end
    $var wire  5 E dec_jalr_rs1_idx [4:0] $end
    $var wire 32 % if_instr_o [31:0] $end
    $var wire 32 # if_pc_next_o [31:0] $end
    $var wire 32 $ if_pc_o [31:0] $end
    $var wire  1 & if_prdt_taken_o $end
    $var wire 32 $ if_req_pc [31:0] $end
    $var wire  1 U! if_req_ready $end
    $var wire  1 U! if_req_valid $end
    $var wire  1 T! if_resp_err $end
    $var wire 32 % if_resp_instr [31:0] $end
    $var wire  1 U! if_resp_ready $end
    $var wire  1 U! if_resp_valid $end
    $var wire 32 % instr [31:0] $end
    $var wire  1 G jalr_rs1_x0 $end
    $var wire  1 H jalr_rs1_x1 $end
    $var wire 32 J pc_add_op1 [31:0] $end
    $var wire 32 K pc_add_op2 [31:0] $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 32 I prdt_pc_add_op1 [31:0] $end
    $var wire 32 F prdt_pc_add_op2 [31:0] $end
    $var wire  1 & prdt_taken $end
    $scope module fetch_if2icb_u $end
     $var wire 32 $ if_req_pc_i [31:0] $end
     $var wire  1 U! if_req_ready_o $end
     $var wire  1 U! if_req_valid_i $end
     $var wire  1 T! if_resp_err_o $end
     $var wire 32 % if_resp_instr_o [31:0] $end
     $var wire  1 U! if_resp_ready_i $end
     $var wire  1 U! if_resp_valid_o $end
     $var wire 32 % instr [31:0] $end
     $var wire 32 $ pc [31:0] $end
    $upscope $end
    $scope module mini_dec_u $end
     $var wire 32 M bjp_imm_bxx [31:0] $end
     $var wire 32 N bjp_imm_jal [31:0] $end
     $var wire 32 O bjp_imm_jalr [31:0] $end
     $var wire 32 F dec_bjp_imm_o [31:0] $end
     $var wire  1 A dec_bjp_o $end
     $var wire  1 B dec_bxx_o $end
     $var wire  1 C dec_jal_o $end
     $var wire  1 D dec_jalr_o $end
     $var wire  5 E dec_jalr_rs1_idx_o [4:0] $end
     $var wire 32 % instr_i [31:0] $end
     $var wire  7 L opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module pc_reg_u $end
    $var wire  1 P! clk $end
    $var wire 32 @ pc_din [31:0] $end
    $var wire 32 # pc_next_i [31:0] $end
    $var wire 32 $ pc_o [31:0] $end
    $var wire  1 S! pipe_flush_i $end
    $var wire 32 < pipe_flush_pc_i [31:0] $end
    $var wire  1 Q! rst_n $end
    $var wire  1 T! stall_i $end
    $var wire  1 U! wen $end
    $scope module pc_dff $end
     $var wire 32 V! DW [31:0] $end
     $var wire 32 W! RESET_VAL [31:0] $end
     $var wire  1 P! clk $end
     $var wire 32 @ din [31:0] $end
     $var wire 32 $ qout [31:0] $end
     $var wire 32 $ qout_r [31:0] $end
     $var wire  1 Q! rst_n $end
     $var wire  1 U! wen $end
    $upscope $end
   $upscope $end
   $scope module regfile_u $end
    $var wire  1 P! clk $end
    $var wire 32 v i [31:0] $end
    $var wire  1 X! rd_en_i $end
    $var wire  5 Y! rd_idx_i [4:0] $end
    $var wire 32 Z! rd_wdata_i [31:0] $end
    $var wire 32 W reg_data(1) [31:0] $end
    $var wire 32 ` reg_data(10) [31:0] $end
    $var wire 32 a reg_data(11) [31:0] $end
    $var wire 32 b reg_data(12) [31:0] $end
    $var wire 32 c reg_data(13) [31:0] $end
    $var wire 32 d reg_data(14) [31:0] $end
    $var wire 32 e reg_data(15) [31:0] $end
    $var wire 32 f reg_data(16) [31:0] $end
    $var wire 32 g reg_data(17) [31:0] $end
    $var wire 32 h reg_data(18) [31:0] $end
    $var wire 32 i reg_data(19) [31:0] $end
    $var wire 32 X reg_data(2) [31:0] $end
    $var wire 32 j reg_data(20) [31:0] $end
    $var wire 32 k reg_data(21) [31:0] $end
    $var wire 32 l reg_data(22) [31:0] $end
    $var wire 32 m reg_data(23) [31:0] $end
    $var wire 32 n reg_data(24) [31:0] $end
    $var wire 32 o reg_data(25) [31:0] $end
    $var wire 32 p reg_data(26) [31:0] $end
    $var wire 32 q reg_data(27) [31:0] $end
    $var wire 32 r reg_data(28) [31:0] $end
    $var wire 32 s reg_data(29) [31:0] $end
    $var wire 32 Y reg_data(3) [31:0] $end
    $var wire 32 t reg_data(30) [31:0] $end
    $var wire 32 u reg_data(31) [31:0] $end
    $var wire 32 Z reg_data(4) [31:0] $end
    $var wire 32 [ reg_data(5) [31:0] $end
    $var wire 32 \ reg_data(6) [31:0] $end
    $var wire 32 ] reg_data(7) [31:0] $end
    $var wire 32 ^ reg_data(8) [31:0] $end
    $var wire 32 _ reg_data(9) [31:0] $end
    $var wire 32 V! reg_num [31:0] $end
    $var wire  1 ) rs1_en_i $end
    $var wire  5 + rs1_idx_i [4:0] $end
    $var wire 32 - rs1_rdata_o [31:0] $end
    $var wire 32 [! rs1_x1_rdata_o [31:0] $end
    $var wire  1 * rs2_en_i $end
    $var wire  5 , rs2_idx_i [4:0] $end
    $var wire 32 . rs2_rdata_o [31:0] $end
    $var wire  1 Q! rst_n $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000100 #
b00000000000000000000000000000000 $
b00000000001000111000001110010011 %
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
03
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
b00000 :
0;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000 >
0?
b00000000000000000000000000000100 @
0A
0B
0C
0D
b00111 E
b00000000000000000000000000000000 F
0G
0H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000100 K
b0010011 L
b00000000000000000000100000000110 M
b00000000000000111000000000000010 N
b00000000000000000000000000000010 O
0P
0Q
0R
0S
b0000000 T
b000 U
b0000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b0000000 w
b000 x
b0000000 y
0z
0{
0|
0}
0~
0!!
0"!
1#!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
0+!
0,!
0-!
0.!
0/!
00!
01!
02!
03!
04!
05!
06!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
b00000000000000000000000000000000 O!
1P!
1Q!
0R!
0S!
0T!
1U!
b00000000000000000000000000100000 V!
b00000000000000000000000000000000 W!
0X!
b00000 Y!
b00000000000000000000000000000000 Z!
b00000000000000000000000000000000 [!
b00000000000000000000000000000101 \!
b00000000000000000000000000000001 ]!
b00000000000000000000000000000000 ^!
b00000000000000000000000000000000 _!
b00000000000000000000000000000000 `!
#1
0P!
#2
b00000000000000000000000000001000 #
b00000000000000000000000000000100 $
b00000000000100110000001100010011 %
b00000000001000111000001110010011 (
1)
b00111 +
b00010 ,
b00000000000000000000000000000010 1
b00111 2
13
b00000000000000000000000000001000 @
b00110 E
b00000000000000000000000000000100 I
b00000000000000000000000000000100 J
b00000000000000000000000000000110 M
b00000000000000110000100000000000 N
b00000000000000000000000000000001 O
1P
1Q
b0010011 T
1P!
#3
0P!
#4
b00000000000000000000000000001100 #
b00000000000000000000000000001000 $
b00000000011100110000001010110011 %
b00000000000000000000000000000100 '
b00000000000100110000001100010011 (
b00110 +
b00001 ,
b00000000000000000000000000000001 1
b00110 2
b00000000001000111000001110010011 5
b00000000000000000000000000000010 8
b00111 :
1;
b00000000000000000000000000000010 <
b00000000000000000000000000000010 =
b00111 >
1?
b00000000000000000000000000001100 @
b00000000000000000000000000001000 I
b00000000000000000000000000001000 J
b0110011 L
b00000000000000000000100000000100 M
b00000000000000110000100000000110 N
b00000000000000000000000000000111 O
b0010011 w
1{
1"!
1-!
b00000000000000000000000000000010 8!
b00000000000000000000000000000010 9!
b11111111111111111111111111111110 :!
b00000000000000000000000000000010 <!
b00000000000000000000000000000010 =!
b00000000000000000000000000000001 >!
1E!
1F!
b00000000000000000000000000000010 O!
1P!
#5
0P!
#6
b00000000000000000000000000010000 #
b00000000000000000000000000001100 $
b00000000000000000000000000000000 %
b00000000000000000000000000001000 '
b00000000011100110000001010110011 (
1*
b00111 ,
b00000000000000000000000000000001 /
b00000000000000000000000000000000 1
b00101 2
b00000000000000000000000000000100 4
b00000000000100110000001100010011 5
b00000000000000000000000000000001 8
b00110 :
b00000000000000000000000000000101 <
b00000000000000000000000000000001 =
b00110 >
b00000000000000000000000000010000 @
b00000 E
1G
b00000000000000000000000000001100 I
b00000000000000000000000000001100 J
b0000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
1R
b0110011 T
b00000000000000000000000000000001 8!
b00000000000000000000000000000001 9!
b11111111111111111111111111111111 :!
b00000000000000000000000000000001 <!
b00000000000000000000000000000001 =!
b00000000000000000000000000000001 O!
1P!
#7
0P!
#8
b00000000000000000000000000010100 #
b00000000000000000000000000010000 $
b00000000000000000000000000001100 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 /
b00000 2
03
b00000000000000000000000000001000 4
b00000000011100110000001010110011 5
b00000000000000000000000000000001 6
b00000000000000000000000000000000 8
b00101 :
b00000000000000000000000000001000 <
b00101 >
b00000000000000000000000000010100 @
b00000000000000000000000000010000 I
b00000000000000000000000000010000 J
0P
0Q
0R
b0000000 T
b0110011 w
1z
0{
0#!
1$!
0-!
1.!
b00000000000000000000000000000001 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000001 :!
b00000000000000000000000000000000 >!
0F!
b00000000000000000000000000000000 O!
1P!
#9
0P!
#10
b00000000000000000000000000011000 #
b00000000000000000000000000010100 $
b00000000000000000000000000010000 '
b00000000000000000000000000001100 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000 :
0;
b00000000000000000000000000001100 <
b00000000000000000000000000000000 =
b00000 >
0?
b00000000000000000000000000011000 @
b00000000000000000000000000010100 I
b00000000000000000000000000010100 J
b0000000 w
0z
0"!
1#!
0$!
0.!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
0E!
1P!
#11
0P!
#12
b00000000000000000000000000011100 #
b00000000000000000000000000011000 $
b00000000000000000000000000010100 '
b00000000000000000000000000010000 4
b00000000000000000000000000010000 <
b00000000000000000000000000011100 @
b00000000000000000000000000011000 I
b00000000000000000000000000011000 J
1P!
#13
0P!
#14
b00000000000000000000000000100000 #
b00000000000000000000000000011100 $
b00000000000000000000000000011000 '
b00000000000000000000000000010100 4
b00000000000000000000000000010100 <
b00000000000000000000000000100000 @
b00000000000000000000000000011100 I
b00000000000000000000000000011100 J
1P!
#15
0P!
#16
b00000000000000000000000000100100 #
b00000000000000000000000000100000 $
b00000000000000000000000000011100 '
b00000000000000000000000000011000 4
b00000000000000000000000000011000 <
b00000000000000000000000000100100 @
b00000000000000000000000000100000 I
b00000000000000000000000000100000 J
1P!
#17
0P!
#18
b00000000000000000000000000101000 #
b00000000000000000000000000100100 $
b00000000000000000000000000100000 '
b00000000000000000000000000011100 4
b00000000000000000000000000011100 <
b00000000000000000000000000101000 @
b00000000000000000000000000100100 I
b00000000000000000000000000100100 J
1P!
#19
0P!
