$version Generated by VerilatedVcd $end
$date Tue Dec  6 22:48:27 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 X! clk $end
  $var wire  1 Y! rst_n $end
  $scope module riscx $end
   $var wire  1 X! clk $end
   $var wire 32 1 dec_imm [31:0] $end
   $var wire 32 ( dec_instr [31:0] $end
   $var wire 32 ' dec_pc [31:0] $end
   $var wire  1 3 dec_rd_en $end
   $var wire  5 2 dec_rd_idx [4:0] $end
   $var wire  1 ) dec_rs1_en $end
   $var wire  5 + dec_rs1_idx [4:0] $end
   $var wire 32 / dec_rs1_rdata [31:0] $end
   $var wire  1 * dec_rs2_en $end
   $var wire  5 , dec_rs2_idx [4:0] $end
   $var wire 32 0 dec_rs2_rdata [31:0] $end
   $var wire 32 = ex_alu_res [31:0] $end
   $var wire 32 B ex_mem_alu_res [31:0] $end
   $var wire  1 D ex_mem_ex_rd_en $end
   $var wire  5 C ex_mem_ex_rd_idx [4:0] $end
   $var wire 32 E ex_mem_ex_rd_wdata [31:0] $end
   $var wire 32 A ex_mem_instr [31:0] $end
   $var wire 32 @ ex_mem_pc [31:0] $end
   $var wire  1 [! ex_pipe_flush $end
   $var wire 32 < ex_pipe_flush_pc [31:0] $end
   $var wire  1 ? ex_rd_en $end
   $var wire  5 > ex_rd_idx [4:0] $end
   $var wire 32 = ex_rd_wdata [31:0] $end
   $var wire 32 8 id_ex_imm [31:0] $end
   $var wire 32 5 id_ex_instr [31:0] $end
   $var wire 32 4 id_ex_pc [31:0] $end
   $var wire  1 9 id_ex_prdt_taken $end
   $var wire  1 ; id_ex_rd_en $end
   $var wire  5 : id_ex_rd_idx [4:0] $end
   $var wire 32 6 id_ex_rs1_rdata [31:0] $end
   $var wire 32 7 id_ex_rs2_rdata [31:0] $end
   $var wire 32 ( if_id_instr [31:0] $end
   $var wire 32 ' if_id_pc [31:0] $end
   $var wire  1 Z! if_id_prdt_taken $end
   $var wire 32 % if_instr [31:0] $end
   $var wire 32 $ if_pc [31:0] $end
   $var wire 32 # if_pc_next [31:0] $end
   $var wire  1 & if_prdt_taken $end
   $var wire 32 $ pr_pc [31:0] $end
   $var wire 32 - rf_rs1_rdata [31:0] $end
   $var wire 32 . rf_rs2_rdata [31:0] $end
   $var wire  1 Y! rst_n $end
   $scope module ex_mem_u $end
    $var wire  1 X! clk $end
    $var wire 32 = ex_alu_res_i [31:0] $end
    $var wire 32 5 ex_instr_i [31:0] $end
    $var wire 32 B ex_mem_alu_res_o [31:0] $end
    $var wire  1 D ex_mem_ex_rd_en_o $end
    $var wire  5 C ex_mem_ex_rd_idx_o [4:0] $end
    $var wire 32 E ex_mem_ex_rd_wdata_o [31:0] $end
    $var wire 32 A ex_mem_instr_o [31:0] $end
    $var wire 32 @ ex_mem_pc_o [31:0] $end
    $var wire 32 4 ex_pc_i [31:0] $end
    $var wire  1 ? ex_rd_en_i $end
    $var wire  5 > ex_rd_idx_i [4:0] $end
    $var wire 32 = ex_rd_wdata_i [31:0] $end
    $var wire  1 Y! rst_n $end
    $var wire  1 ]! wen $end
    $scope module alu_res_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 = din [31:0] $end
     $var wire 32 B qout [31:0] $end
     $var wire 32 B qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module ex_rd_en_dff $end
     $var wire 32 g! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire  1 ? din [0:0] $end
     $var wire  1 D qout [0:0] $end
     $var wire  1 D qout_r [0:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module ex_rd_idx_dff $end
     $var wire 32 f! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire  5 > din [4:0] $end
     $var wire  5 C qout [4:0] $end
     $var wire  5 C qout_r [4:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module ex_rd_wdata_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 = din [31:0] $end
     $var wire 32 E qout [31:0] $end
     $var wire 32 E qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 5 din [31:0] $end
     $var wire 32 A qout [31:0] $end
     $var wire 32 A qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 4 din [31:0] $end
     $var wire 32 @ qout [31:0] $end
     $var wire 32 @ qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
   $upscope $end
   $scope module ex_u $end
    $var wire 32 A! add_res [31:0] $end
    $var wire  1 $! al $end
    $var wire  1 *! al_ali $end
    $var wire  1 %! ali $end
    $var wire 32 ?! alu_op1 [31:0] $end
    $var wire 32 @! alu_op2 [31:0] $end
    $var wire 32 C! and_res [31:0] $end
    $var wire  1 )! auipc $end
    $var wire  1 G! beq $end
    $var wire  1 O! beq_res $end
    $var wire  1 J! bge $end
    $var wire  1 R! bge_res $end
    $var wire  1 L! bgeu $end
    $var wire  1 T! bgeu_res $end
    $var wire  1 I! blt $end
    $var wire  1 Q! blt_res $end
    $var wire  1 K! bltu $end
    $var wire  1 S! bltu_res $end
    $var wire  1 H! bne $end
    $var wire  1 P! bne_res $end
    $var wire  1 '! branch $end
    $var wire  1 U! branch_res $end
    $var wire  1 '! bxx $end
    $var wire 32 = ex_alu_res_o [31:0] $end
    $var wire  1 [! ex_pipe_flush_o $end
    $var wire 32 < ex_pipe_flush_pc_o [31:0] $end
    $var wire  1 ? ex_rd_en_o $end
    $var wire  5 > ex_rd_idx_o [4:0] $end
    $var wire 32 = ex_rd_wdata_o [31:0] $end
    $var wire  3 "! fun3 [2:0] $end
    $var wire  7 #! fun7 [6:0] $end
    $var wire  1 +! fun_add $end
    $var wire  1 4! fun_and $end
    $var wire  1 3! fun_or $end
    $var wire  1 -! fun_sll $end
    $var wire  1 .! fun_slt $end
    $var wire  1 /! fun_sltu $end
    $var wire  1 2! fun_sra $end
    $var wire  1 1! fun_srl $end
    $var wire  1 ,! fun_sub $end
    $var wire  1 0! fun_xor $end
    $var wire 32 8 imm_i [31:0] $end
    $var wire 32 5 instr_i [31:0] $end
    $var wire  1 &! ld_st $end
    $var wire  1 N! lt $end
    $var wire  1 (! lui $end
    $var wire  1 M! neq $end
    $var wire  1 5! op_add $end
    $var wire  1 :! op_and $end
    $var wire  1 ;! op_or $end
    $var wire  1 7! op_sll $end
    $var wire  1 =! op_slt $end
    $var wire  1 >! op_sltu $end
    $var wire  1 9! op_sra $end
    $var wire  1 8! op_srl $end
    $var wire  1 6! op_sub $end
    $var wire  1 <! op_xor $end
    $var wire  7 !! opcode [6:0] $end
    $var wire 32 D! or_res [31:0] $end
    $var wire 32 4 pc_i [31:0] $end
    $var wire  1 V! pipe_flush $end
    $var wire 32 4 pipe_flush_pc_op1 [31:0] $end
    $var wire 32 W! pipe_flush_pc_op2 [31:0] $end
    $var wire  1 9 prdt_taken $end
    $var wire  5 > rd [4:0] $end
    $var wire  1 ; rd_en_i $end
    $var wire  5 : rd_idx_i [4:0] $end
    $var wire 32 6 rs1_rdata_i [31:0] $end
    $var wire 32 7 rs2_rdata_i [31:0] $end
    $var wire 32 h! sll_res [31:0] $end
    $var wire 32 F! slt_res [31:0] $end
    $var wire 32 F! sltu_res [31:0] $end
    $var wire 32 j! sra_res [31:0] $end
    $var wire 32 i! srl_res [31:0] $end
    $var wire 32 B! sub_res [31:0] $end
    $var wire 32 E! xor_res [31:0] $end
   $upscope $end
   $scope module id_ex_u $end
    $var wire  1 X! clk $end
    $var wire 32 1 dec_imm_i [31:0] $end
    $var wire 32 ( dec_instr_i [31:0] $end
    $var wire 32 ' dec_pc_i [31:0] $end
    $var wire  1 3 dec_rd_en_i $end
    $var wire  5 2 dec_rd_idx_i [4:0] $end
    $var wire 32 / dec_rs1_rdata_i [31:0] $end
    $var wire 32 0 dec_rs2_rdata_i [31:0] $end
    $var wire 32 8 id_ex_imm_o [31:0] $end
    $var wire 32 5 id_ex_instr_o [31:0] $end
    $var wire 32 4 id_ex_pc_o [31:0] $end
    $var wire  1 9 id_ex_prdt_taken_o $end
    $var wire  1 ; id_ex_rd_en_o $end
    $var wire  5 : id_ex_rd_idx_o [4:0] $end
    $var wire 32 6 id_ex_rs1_rdata_o [31:0] $end
    $var wire 32 7 id_ex_rs2_rdata_o [31:0] $end
    $var wire  1 Z! if_id_prdt_taken_i $end
    $var wire  1 Y! rst_n $end
    $var wire  1 \! stall_i $end
    $var wire  1 ]! wen $end
    $scope module alu_fun_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 1 din [31:0] $end
     $var wire 32 8 qout [31:0] $end
     $var wire 32 8 qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module alu_op1_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 / din [31:0] $end
     $var wire 32 6 qout [31:0] $end
     $var wire 32 6 qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module alu_op2_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 0 din [31:0] $end
     $var wire 32 7 qout [31:0] $end
     $var wire 32 7 qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 ( din [31:0] $end
     $var wire 32 5 qout [31:0] $end
     $var wire 32 5 qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 ' din [31:0] $end
     $var wire 32 4 qout [31:0] $end
     $var wire 32 4 qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module prdt_taken_dff $end
     $var wire 32 g! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire  1 Z! din [0:0] $end
     $var wire  1 9 qout [0:0] $end
     $var wire  1 9 qout_r [0:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module rd_en_dff $end
     $var wire 32 g! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire  1 3 din [0:0] $end
     $var wire  1 ; qout [0:0] $end
     $var wire  1 ; qout_r [0:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module rd_idx_dff $end
     $var wire 32 f! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire  5 2 din [4:0] $end
     $var wire  5 : qout [4:0] $end
     $var wire  5 : qout_r [4:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
   $upscope $end
   $scope module id_u $end
    $var wire 32 1 dec_imm_o [31:0] $end
    $var wire 32 ( dec_instr_o [31:0] $end
    $var wire 32 ' dec_pc_o [31:0] $end
    $var wire  1 3 dec_rd_en_o $end
    $var wire  5 2 dec_rd_idx_o [4:0] $end
    $var wire  1 ) dec_rs1_en_o $end
    $var wire  5 + dec_rs1_idx_o [4:0] $end
    $var wire 32 / dec_rs1_rdata_o [31:0] $end
    $var wire  1 * dec_rs2_en_o $end
    $var wire  5 , dec_rs2_idx_o [4:0] $end
    $var wire 32 0 dec_rs2_rdata_o [31:0] $end
    $var wire  1 D ex_mem_ex_rd_en_i $end
    $var wire  5 C ex_mem_ex_rd_idx_i [4:0] $end
    $var wire 32 E ex_mem_ex_rd_wdata_i [31:0] $end
    $var wire  1 ? ex_rd_en_i $end
    $var wire  5 > ex_rd_idx_i [4:0] $end
    $var wire 32 = ex_rd_wdata_i [31:0] $end
    $var wire  3 ] fun3 [2:0] $end
    $var wire  7 ^ fun7 [6:0] $end
    $var wire 32 ( instr_i [31:0] $end
    $var wire  7 \ opcode [6:0] $end
    $var wire 32 ' pc_i [31:0] $end
    $var wire  5 2 rd [4:0] $end
    $var wire  5 + rs1 [4:0] $end
    $var wire  1 X rs1_ex_fwd $end
    $var wire  1 Y rs1_mem_ex_fwd $end
    $var wire  1 `! rs1_mem_fwd $end
    $var wire  1 V rs1_not_x0 $end
    $var wire 32 - rs1_rdata_i [31:0] $end
    $var wire  5 , rs2 [4:0] $end
    $var wire  1 Z rs2_ex_fwd $end
    $var wire  1 [ rs2_mem_ex_fwd $end
    $var wire  1 a! rs2_mem_fwd $end
    $var wire  1 W rs2_not_x0 $end
    $var wire 32 - rs2_rdata_i [31:0] $end
   $upscope $end
   $scope module if_id_u $end
    $var wire  1 X! clk $end
    $var wire 32 ( if_id_instr_o [31:0] $end
    $var wire 32 ' if_id_pc_o [31:0] $end
    $var wire  1 Z! if_id_prdt_taken_o $end
    $var wire 32 % if_instr_i [31:0] $end
    $var wire 32 $ if_pc_i [31:0] $end
    $var wire  1 & if_prdt_taken_i $end
    $var wire  1 Y! rst_n $end
    $var wire  1 \! stall_i $end
    $var wire  1 ]! wen $end
    $scope module instr_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 % din [31:0] $end
     $var wire 32 ( qout [31:0] $end
     $var wire 32 ( qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 $ din [31:0] $end
     $var wire 32 ' qout [31:0] $end
     $var wire 32 ' qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
   $upscope $end
   $scope module if_u $end
    $var wire  1 G dec_bjp $end
    $var wire 32 L dec_bjp_imm [31:0] $end
    $var wire  1 H dec_bxx $end
    $var wire  1 I dec_jal $end
    $var wire  1 J dec_jalr $end
    $var wire  5 K dec_jalr_rs1_idx [4:0] $end
    $var wire 32 % if_instr_o [31:0] $end
    $var wire 32 # if_pc_next_o [31:0] $end
    $var wire 32 $ if_pc_o [31:0] $end
    $var wire  1 & if_prdt_taken_o $end
    $var wire 32 $ if_req_pc [31:0] $end
    $var wire  1 ]! if_req_ready $end
    $var wire  1 ]! if_req_valid $end
    $var wire  1 \! if_resp_err $end
    $var wire 32 % if_resp_instr [31:0] $end
    $var wire  1 ]! if_resp_ready $end
    $var wire  1 ]! if_resp_valid $end
    $var wire 32 % instr [31:0] $end
    $var wire  1 M jalr_rs1_x0 $end
    $var wire  1 N jalr_rs1_x1 $end
    $var wire 32 P pc_add_op1 [31:0] $end
    $var wire 32 Q pc_add_op2 [31:0] $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 32 O prdt_pc_add_op1 [31:0] $end
    $var wire 32 L prdt_pc_add_op2 [31:0] $end
    $var wire  1 & prdt_taken $end
    $scope module fetch_if2icb_u $end
     $var wire 32 $ if_req_pc_i [31:0] $end
     $var wire  1 ]! if_req_ready_o $end
     $var wire  1 ]! if_req_valid_i $end
     $var wire  1 \! if_resp_err_o $end
     $var wire 32 % if_resp_instr_o [31:0] $end
     $var wire  1 ]! if_resp_ready_i $end
     $var wire  1 ]! if_resp_valid_o $end
     $var wire 32 % instr [31:0] $end
     $var wire 32 $ pc [31:0] $end
    $upscope $end
    $scope module mini_dec_u $end
     $var wire 32 S bjp_imm_bxx [31:0] $end
     $var wire 32 T bjp_imm_jal [31:0] $end
     $var wire 32 U bjp_imm_jalr [31:0] $end
     $var wire 32 L dec_bjp_imm_o [31:0] $end
     $var wire  1 G dec_bjp_o $end
     $var wire  1 H dec_bxx_o $end
     $var wire  1 I dec_jal_o $end
     $var wire  1 J dec_jalr_o $end
     $var wire  5 K dec_jalr_rs1_idx_o [4:0] $end
     $var wire 32 % instr_i [31:0] $end
     $var wire  7 R opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module pc_reg_u $end
    $var wire  1 X! clk $end
    $var wire 32 F pc_din [31:0] $end
    $var wire 32 # pc_next_i [31:0] $end
    $var wire 32 $ pc_o [31:0] $end
    $var wire  1 [! pipe_flush_i $end
    $var wire 32 < pipe_flush_pc_i [31:0] $end
    $var wire  1 Y! rst_n $end
    $var wire  1 \! stall_i $end
    $var wire  1 ]! wen $end
    $scope module pc_dff $end
     $var wire 32 ^! DW [31:0] $end
     $var wire 32 _! RESET_VAL [31:0] $end
     $var wire  1 X! clk $end
     $var wire 32 F din [31:0] $end
     $var wire 32 $ qout [31:0] $end
     $var wire 32 $ qout_r [31:0] $end
     $var wire  1 Y! rst_n $end
     $var wire  1 ]! wen $end
    $upscope $end
   $upscope $end
   $scope module regfile_u $end
    $var wire  1 X! clk $end
    $var wire 32 ~ i [31:0] $end
    $var wire  1 b! rd_en_i $end
    $var wire  5 c! rd_idx_i [4:0] $end
    $var wire 32 d! rd_wdata_i [31:0] $end
    $var wire 32 _ reg_data(1) [31:0] $end
    $var wire 32 h reg_data(10) [31:0] $end
    $var wire 32 i reg_data(11) [31:0] $end
    $var wire 32 j reg_data(12) [31:0] $end
    $var wire 32 k reg_data(13) [31:0] $end
    $var wire 32 l reg_data(14) [31:0] $end
    $var wire 32 m reg_data(15) [31:0] $end
    $var wire 32 n reg_data(16) [31:0] $end
    $var wire 32 o reg_data(17) [31:0] $end
    $var wire 32 p reg_data(18) [31:0] $end
    $var wire 32 q reg_data(19) [31:0] $end
    $var wire 32 ` reg_data(2) [31:0] $end
    $var wire 32 r reg_data(20) [31:0] $end
    $var wire 32 s reg_data(21) [31:0] $end
    $var wire 32 t reg_data(22) [31:0] $end
    $var wire 32 u reg_data(23) [31:0] $end
    $var wire 32 v reg_data(24) [31:0] $end
    $var wire 32 w reg_data(25) [31:0] $end
    $var wire 32 x reg_data(26) [31:0] $end
    $var wire 32 y reg_data(27) [31:0] $end
    $var wire 32 z reg_data(28) [31:0] $end
    $var wire 32 { reg_data(29) [31:0] $end
    $var wire 32 a reg_data(3) [31:0] $end
    $var wire 32 | reg_data(30) [31:0] $end
    $var wire 32 } reg_data(31) [31:0] $end
    $var wire 32 b reg_data(4) [31:0] $end
    $var wire 32 c reg_data(5) [31:0] $end
    $var wire 32 d reg_data(6) [31:0] $end
    $var wire 32 e reg_data(7) [31:0] $end
    $var wire 32 f reg_data(8) [31:0] $end
    $var wire 32 g reg_data(9) [31:0] $end
    $var wire 32 ^! reg_num [31:0] $end
    $var wire  1 ) rs1_en_i $end
    $var wire  5 + rs1_idx_i [4:0] $end
    $var wire 32 - rs1_rdata_o [31:0] $end
    $var wire 32 e! rs1_x1_rdata_o [31:0] $end
    $var wire  1 * rs2_en_i $end
    $var wire  5 , rs2_idx_i [4:0] $end
    $var wire 32 . rs2_rdata_o [31:0] $end
    $var wire  1 Y! rst_n $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000100 #
b00000000000000000000000000000000 $
b00000000001000111000001110010011 %
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
03
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
b00000 :
0;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000 >
0?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000 C
0D
b00000000000000000000000000000000 E
b00000000000000000000000000000100 F
0G
0H
0I
0J
b00111 K
b00000000000000000000000000000000 L
0M
0N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000100 Q
b0010011 R
b00000000000000000000100000000110 S
b00000000000000111000000000000010 T
b00000000000000000000000000000010 U
0V
0W
0X
0Y
0Z
0[
b0000000 \
b000 ]
b0000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b0000000 !!
b000 "!
b0000000 #!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
1+!
0,!
0-!
0.!
0/!
00!
01!
02!
03!
04!
05!
06!
07!
08!
09!
0:!
0;!
0<!
0=!
0>!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
0O!
0P!
0Q!
0R!
0S!
0T!
0U!
0V!
b00000000000000000000000000000000 W!
1X!
1Y!
0Z!
0[!
0\!
1]!
b00000000000000000000000000100000 ^!
b00000000000000000000000000000000 _!
0`!
0a!
0b!
b00000 c!
b00000000000000000000000000000000 d!
b00000000000000000000000000000000 e!
b00000000000000000000000000000101 f!
b00000000000000000000000000000001 g!
b00000000000000000000000000000000 h!
b00000000000000000000000000000000 i!
b00000000000000000000000000000000 j!
#1
0X!
#2
b00000000000000000000000000001000 #
b00000000000000000000000000000100 $
b00000000000100110000001100010011 %
b00000000001000111000001110010011 (
1)
b00111 +
b00010 ,
b00000000000000000000000000000010 1
b00111 2
13
b00000000000000000000000000001000 F
b00110 K
b00000000000000000000000000000100 O
b00000000000000000000000000000100 P
b00000000000000000000000000000110 S
b00000000000000110000100000000000 T
b00000000000000000000000000000001 U
1V
1W
b0010011 \
1X!
#3
0X!
#4
b00000000000000000000000000001100 #
b00000000000000000000000000001000 $
b00000000011100110000001010110011 %
b00000000000000000000000000000100 '
b00000000000100110000001100010011 (
b00110 +
b00001 ,
b00000000000000000000000000000001 1
b00110 2
b00000000001000111000001110010011 5
b00000000000000000000000000000010 8
b00111 :
1;
b00000000000000000000000000000010 <
b00000000000000000000000000000010 =
b00111 >
1?
b00000000000000000000000000001100 F
b00000000000000000000000000001000 O
b00000000000000000000000000001000 P
b0110011 R
b00000000000000000000100000000100 S
b00000000000000110000100000000110 T
b00000000000000000000000000000111 U
b0010011 !!
1%!
1*!
15!
b00000000000000000000000000000010 @!
b00000000000000000000000000000010 A!
b11111111111111111111111111111110 B!
b00000000000000000000000000000010 D!
b00000000000000000000000000000010 E!
b00000000000000000000000000000001 F!
1M!
1N!
b00000000000000000000000000000010 W!
1X!
#5
0X!
#6
b00000000000000000000000000010000 #
b00000000000000000000000000001100 $
b00000000010101010010010000100011 %
b00000000000000000000000000001000 '
b00000000011100110000001010110011 (
1*
b00111 ,
b00000000000000000000000000000001 /
b00000000000000000000000000000010 0
b00000000000000000000000000000000 1
b00101 2
b00000000000000000000000000000100 4
b00000000000100110000001100010011 5
b00000000000000000000000000000001 8
b00110 :
b00000000000000000000000000000101 <
b00000000000000000000000000000001 =
b00110 >
b00000000001000111000001110010011 A
b00000000000000000000000000000010 B
b00111 C
1D
b00000000000000000000000000000010 E
b00000000000000000000000000010000 F
b01010 K
b00000000000000000000000000001100 O
b00000000000000000000000000001100 P
b0100011 R
b00000000000000000000000000001000 S
b00000000000001010010100000000100 T
b00000000000000000000000000000101 U
1X
1[
b0110011 \
b00000000000000000000000000000001 @!
b00000000000000000000000000000001 A!
b11111111111111111111111111111111 B!
b00000000000000000000000000000001 D!
b00000000000000000000000000000001 E!
b00000000000000000000000000000001 W!
1X!
#7
0X!
#8
b00000000000000000000000000010100 #
b00000000000000000000000000010000 $
b00000000000000000000000000000000 %
b00000000000000000000000000001100 '
b00000000010101010010010000100011 (
b01010 +
b00101 ,
b00000000000000000000000000000000 /
b00000000000000000000000000000011 0
b00000000000000000000000000001000 1
b01000 2
03
b00000000000000000000000000001000 4
b00000000011100110000001010110011 5
b00000000000000000000000000000001 6
b00000000000000000000000000000010 7
b00000000000000000000000000000000 8
b00101 :
b00000000000000000000000000001000 <
b00000000000000000000000000000011 =
b00101 >
b00000000000000000000000000000100 @
b00000000000100110000001100010011 A
b00000000000000000000000000000001 B
b00110 C
b00000000000000000000000000000001 E
b00000000000000000000000000010100 F
b00000 K
1M
b00000000000000000000000000010000 O
b00000000000000000000000000010000 P
b0000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
0X
1Z
0[
b0100011 \
b010 ]
b0110011 !!
1$!
0%!
b00000000000000000000000000000001 ?!
b00000000000000000000000000000010 @!
b00000000000000000000000000000011 A!
b00000000000000000000000000000011 D!
b00000000000000000000000000000011 E!
b00000000000000000000000000000000 W!
1X!
#9
0X!
#10
b00000000000000000000000000011000 #
b00000000000000000000000000010100 $
b00000000000000000000000000010000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
b00000000000000000000000000001100 4
b00000000010101010010010000100011 5
b00000000000000000000000000000000 6
b00000000000000000000000000000011 7
b00000000000000000000000000001000 8
b01000 :
0;
b00000000000000000000000000010100 <
b00000000000000000000000000001000 =
b01000 >
0?
b00000000000000000000000000001000 @
b00000000011100110000001010110011 A
b00000000000000000000000000000011 B
b00101 C
b00000000000000000000000000000011 E
b00000000000000000000000000011000 F
b00000000000000000000000000010100 O
b00000000000000000000000000010100 P
0V
0W
0Z
b0000000 \
b000 ]
b0100011 !!
b010 "!
0$!
1&!
0*!
0+!
1.!
b00000000000000000000000000000000 ?!
b00000000000000000000000000001000 @!
b00000000000000000000000000001000 A!
b11111111111111111111111111111000 B!
b00000000000000000000000000001000 D!
b00000000000000000000000000001000 E!
b00000000000000000000000000001000 W!
1X!
#11
0X!
#12
b00000000000000000000000000011100 #
b00000000000000000000000000011000 $
b00000000000000000000000000010100 '
b00000000000000000000000000010000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000 :
b00000000000000000000000000010000 <
b00000000000000000000000000000000 =
b00000 >
b00000000000000000000000000001100 @
b00000000010101010010010000100011 A
b00000000000000000000000000001000 B
b01000 C
0D
b00000000000000000000000000001000 E
b00000000000000000000000000011100 F
b00000000000000000000000000011000 O
b00000000000000000000000000011000 P
b0000000 !!
b000 "!
0&!
1+!
0.!
05!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
0M!
0N!
b00000000000000000000000000000000 W!
1X!
#13
0X!
#14
b00000000000000000000000000100000 #
b00000000000000000000000000011100 $
b00000000000000000000000000011000 '
b00000000000000000000000000010100 4
b00000000000000000000000000010100 <
b00000000000000000000000000010000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000 C
b00000000000000000000000000000000 E
b00000000000000000000000000100000 F
b00000000000000000000000000011100 O
b00000000000000000000000000011100 P
1X!
#15
0X!
#16
b00000000000000000000000000100100 #
b00000000000000000000000000100000 $
b00000000000000000000000000011100 '
b00000000000000000000000000011000 4
b00000000000000000000000000011000 <
b00000000000000000000000000010100 @
b00000000000000000000000000100100 F
b00000000000000000000000000100000 O
b00000000000000000000000000100000 P
1X!
#17
0X!
#18
b00000000000000000000000000101000 #
b00000000000000000000000000100100 $
b00000000000000000000000000100000 '
b00000000000000000000000000011100 4
b00000000000000000000000000011100 <
b00000000000000000000000000011000 @
b00000000000000000000000000101000 F
b00000000000000000000000000100100 O
b00000000000000000000000000100100 P
1X!
#19
0X!
