$version Generated by VerilatedVcd $end
$date Wed Dec  7 10:49:18 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 a! clk $end
  $var wire  1 b! rst_n $end
  $scope module riscx $end
   $var wire  1 a! clk $end
   $var wire 32 1 dec_imm [31:0] $end
   $var wire 32 ( dec_instr [31:0] $end
   $var wire 32 ' dec_pc [31:0] $end
   $var wire  1 3 dec_rd_en $end
   $var wire  5 2 dec_rd_idx [4:0] $end
   $var wire  1 ) dec_rs1_en $end
   $var wire  5 + dec_rs1_idx [4:0] $end
   $var wire 32 / dec_rs1_rdata [31:0] $end
   $var wire  1 * dec_rs2_en $end
   $var wire  5 , dec_rs2_idx [4:0] $end
   $var wire 32 0 dec_rs2_rdata [31:0] $end
   $var wire 32 = ex_alu_res [31:0] $end
   $var wire 32 B ex_mem_alu_res [31:0] $end
   $var wire  1 D ex_mem_ex_rd_en $end
   $var wire  5 C ex_mem_ex_rd_idx [4:0] $end
   $var wire 32 E ex_mem_ex_rd_wdata [31:0] $end
   $var wire 32 A ex_mem_instr [31:0] $end
   $var wire 32 @ ex_mem_pc [31:0] $end
   $var wire 32 e! ex_mem_rs2_rdata [31:0] $end
   $var wire  1 d! ex_pipe_flush $end
   $var wire 32 < ex_pipe_flush_pc [31:0] $end
   $var wire  1 ? ex_rd_en $end
   $var wire  5 > ex_rd_idx [4:0] $end
   $var wire 32 = ex_rd_wdata [31:0] $end
   $var wire 32 8 id_ex_imm [31:0] $end
   $var wire 32 5 id_ex_instr [31:0] $end
   $var wire 32 4 id_ex_pc [31:0] $end
   $var wire  1 9 id_ex_prdt_taken $end
   $var wire  1 ; id_ex_rd_en $end
   $var wire  5 : id_ex_rd_idx [4:0] $end
   $var wire 32 6 id_ex_rs1_rdata [31:0] $end
   $var wire 32 7 id_ex_rs2_rdata [31:0] $end
   $var wire 32 ( if_id_instr [31:0] $end
   $var wire 32 ' if_id_pc [31:0] $end
   $var wire  1 c! if_id_prdt_taken $end
   $var wire 32 % if_instr [31:0] $end
   $var wire 32 $ if_pc [31:0] $end
   $var wire 32 # if_pc_next [31:0] $end
   $var wire  1 & if_prdt_taken $end
   $var wire  1 G mem_rd_en $end
   $var wire  5 F mem_rd_idx [4:0] $end
   $var wire 32 H mem_rd_wdata [31:0] $end
   $var wire 32 $ pr_pc [31:0] $end
   $var wire 32 - rf_rs1_rdata [31:0] $end
   $var wire 32 . rf_rs2_rdata [31:0] $end
   $var wire  1 b! rst_n $end
   $scope module ex_mem_u $end
    $var wire  1 a! clk $end
    $var wire 32 = ex_alu_res_i [31:0] $end
    $var wire 32 5 ex_instr_i [31:0] $end
    $var wire 32 B ex_mem_alu_res_o [31:0] $end
    $var wire  1 D ex_mem_ex_rd_en_o $end
    $var wire  5 C ex_mem_ex_rd_idx_o [4:0] $end
    $var wire 32 E ex_mem_ex_rd_wdata_o [31:0] $end
    $var wire 32 A ex_mem_instr_o [31:0] $end
    $var wire 32 @ ex_mem_pc_o [31:0] $end
    $var wire 32 e! ex_mem_rs2_rdata_o [31:0] $end
    $var wire 32 4 ex_pc_i [31:0] $end
    $var wire  1 ? ex_rd_en_i $end
    $var wire  5 > ex_rd_idx_i [4:0] $end
    $var wire 32 = ex_rd_wdata_i [31:0] $end
    $var wire 32 7 ex_rs2_rdata_i [31:0] $end
    $var wire  1 b! rst_n $end
    $var wire  1 g! wen $end
    $scope module alu_res_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 = din [31:0] $end
     $var wire 32 B qout [31:0] $end
     $var wire 32 B qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module ex_rd_en_dff $end
     $var wire 32 o! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire  1 ? din [0:0] $end
     $var wire  1 D qout [0:0] $end
     $var wire  1 D qout_r [0:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module ex_rd_idx_dff $end
     $var wire 32 n! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire  5 > din [4:0] $end
     $var wire  5 C qout [4:0] $end
     $var wire  5 C qout_r [4:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module ex_rd_wdata_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 = din [31:0] $end
     $var wire 32 E qout [31:0] $end
     $var wire 32 E qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 5 din [31:0] $end
     $var wire 32 A qout [31:0] $end
     $var wire 32 A qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 4 din [31:0] $end
     $var wire 32 @ qout [31:0] $end
     $var wire 32 @ qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
   $upscope $end
   $scope module ex_u $end
    $var wire 32 G! add_res [31:0] $end
    $var wire  1 )! al $end
    $var wire  1 1! al_ali $end
    $var wire  1 *! ali $end
    $var wire 32 E! alu_op1 [31:0] $end
    $var wire 32 F! alu_op2 [31:0] $end
    $var wire 32 I! and_res [31:0] $end
    $var wire  1 0! auipc $end
    $var wire  1 M! beq $end
    $var wire  1 U! beq_res $end
    $var wire  1 P! bge $end
    $var wire  1 X! bge_res $end
    $var wire  1 R! bgeu $end
    $var wire  1 Z! bgeu_res $end
    $var wire  1 O! blt $end
    $var wire  1 W! blt_res $end
    $var wire  1 Q! bltu $end
    $var wire  1 Y! bltu_res $end
    $var wire  1 N! bne $end
    $var wire  1 V! bne_res $end
    $var wire  1 ,! branch $end
    $var wire  1 [! branch_res $end
    $var wire  1 ,! bxx $end
    $var wire 32 = ex_alu_res_o [31:0] $end
    $var wire  1 d! ex_pipe_flush_o $end
    $var wire 32 < ex_pipe_flush_pc_o [31:0] $end
    $var wire  1 ? ex_rd_en_o $end
    $var wire  5 > ex_rd_idx_o [4:0] $end
    $var wire 32 = ex_rd_wdata_o [31:0] $end
    $var wire  3 '! fun3 [2:0] $end
    $var wire  7 (! fun7 [6:0] $end
    $var wire  1 2! fun_add $end
    $var wire  1 :! fun_and $end
    $var wire  1 9! fun_or $end
    $var wire  1 3! fun_sll $end
    $var wire  1 4! fun_slt $end
    $var wire  1 5! fun_sltu $end
    $var wire  1 8! fun_sra $end
    $var wire  1 7! fun_srl $end
    $var wire  1 6! fun_xor $end
    $var wire 32 8 imm_i [31:0] $end
    $var wire 32 5 instr_i [31:0] $end
    $var wire  1 -! jal $end
    $var wire  1 .! jalr $end
    $var wire  1 +! ld_st $end
    $var wire  1 T! lt $end
    $var wire  1 /! lui $end
    $var wire  1 S! neq $end
    $var wire  1 ;! op_add $end
    $var wire  1 @! op_and $end
    $var wire  1 A! op_or $end
    $var wire  1 =! op_sll $end
    $var wire  1 C! op_slt $end
    $var wire  1 D! op_sltu $end
    $var wire  1 ?! op_sra $end
    $var wire  1 >! op_srl $end
    $var wire  1 <! op_sub $end
    $var wire  1 B! op_xor $end
    $var wire  7 &! opcode [6:0] $end
    $var wire 32 J! or_res [31:0] $end
    $var wire 32 4 pc_i [31:0] $end
    $var wire  1 \! pipe_flush $end
    $var wire 32 4 pipe_flush_pc_op1 [31:0] $end
    $var wire 32 ]! pipe_flush_pc_op2 [31:0] $end
    $var wire  1 9 prdt_taken $end
    $var wire  5 > rd [4:0] $end
    $var wire  1 ; rd_en_i $end
    $var wire  5 : rd_idx_i [4:0] $end
    $var wire 32 6 rs1_rdata_i [31:0] $end
    $var wire 32 7 rs2_rdata_i [31:0] $end
    $var wire 32 p! sll_res [31:0] $end
    $var wire 32 L! slt_res [31:0] $end
    $var wire 32 L! sltu_res [31:0] $end
    $var wire 32 r! sra_res [31:0] $end
    $var wire 32 q! srl_res [31:0] $end
    $var wire 32 H! sub_res [31:0] $end
    $var wire 32 K! xor_res [31:0] $end
   $upscope $end
   $scope module id_ex_u $end
    $var wire  1 a! clk $end
    $var wire 32 1 dec_imm_i [31:0] $end
    $var wire 32 ( dec_instr_i [31:0] $end
    $var wire 32 ' dec_pc_i [31:0] $end
    $var wire  1 3 dec_rd_en_i $end
    $var wire  5 2 dec_rd_idx_i [4:0] $end
    $var wire 32 / dec_rs1_rdata_i [31:0] $end
    $var wire 32 0 dec_rs2_rdata_i [31:0] $end
    $var wire 32 8 id_ex_imm_o [31:0] $end
    $var wire 32 5 id_ex_instr_o [31:0] $end
    $var wire 32 4 id_ex_pc_o [31:0] $end
    $var wire  1 9 id_ex_prdt_taken_o $end
    $var wire  1 ; id_ex_rd_en_o $end
    $var wire  5 : id_ex_rd_idx_o [4:0] $end
    $var wire 32 6 id_ex_rs1_rdata_o [31:0] $end
    $var wire 32 7 id_ex_rs2_rdata_o [31:0] $end
    $var wire  1 c! if_id_prdt_taken_i $end
    $var wire  1 b! rst_n $end
    $var wire  1 f! stall_i $end
    $var wire  1 g! wen $end
    $scope module alu_fun_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 1 din [31:0] $end
     $var wire 32 8 qout [31:0] $end
     $var wire 32 8 qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module alu_op1_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 / din [31:0] $end
     $var wire 32 6 qout [31:0] $end
     $var wire 32 6 qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module alu_op2_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 0 din [31:0] $end
     $var wire 32 7 qout [31:0] $end
     $var wire 32 7 qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 ( din [31:0] $end
     $var wire 32 5 qout [31:0] $end
     $var wire 32 5 qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 ' din [31:0] $end
     $var wire 32 4 qout [31:0] $end
     $var wire 32 4 qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module prdt_taken_dff $end
     $var wire 32 o! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire  1 c! din [0:0] $end
     $var wire  1 9 qout [0:0] $end
     $var wire  1 9 qout_r [0:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module rd_en_dff $end
     $var wire 32 o! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire  1 3 din [0:0] $end
     $var wire  1 ; qout [0:0] $end
     $var wire  1 ; qout_r [0:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module rd_idx_dff $end
     $var wire 32 n! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire  5 2 din [4:0] $end
     $var wire  5 : qout [4:0] $end
     $var wire  5 : qout_r [4:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
   $upscope $end
   $scope module id_u $end
    $var wire 32 1 dec_imm_o [31:0] $end
    $var wire 32 ( dec_instr_o [31:0] $end
    $var wire 32 ' dec_pc_o [31:0] $end
    $var wire  1 3 dec_rd_en_o $end
    $var wire  5 2 dec_rd_idx_o [4:0] $end
    $var wire  1 ) dec_rs1_en_o $end
    $var wire  5 + dec_rs1_idx_o [4:0] $end
    $var wire 32 / dec_rs1_rdata_o [31:0] $end
    $var wire  1 * dec_rs2_en_o $end
    $var wire  5 , dec_rs2_idx_o [4:0] $end
    $var wire 32 0 dec_rs2_rdata_o [31:0] $end
    $var wire  1 D ex_mem_ex_rd_en_i $end
    $var wire  5 C ex_mem_ex_rd_idx_i [4:0] $end
    $var wire 32 E ex_mem_ex_rd_wdata_i [31:0] $end
    $var wire  1 ? ex_rd_en_i $end
    $var wire  5 > ex_rd_idx_i [4:0] $end
    $var wire 32 = ex_rd_wdata_i [31:0] $end
    $var wire  3 b fun3 [2:0] $end
    $var wire  7 c fun7 [6:0] $end
    $var wire 32 ( instr_i [31:0] $end
    $var wire  1 G mem_rd_en_i $end
    $var wire  5 F mem_rd_idx_i [4:0] $end
    $var wire 32 H mem_rd_wdata_i [31:0] $end
    $var wire  7 a opcode [6:0] $end
    $var wire 32 ' pc_i [31:0] $end
    $var wire  5 2 rd [4:0] $end
    $var wire  5 + rs1 [4:0] $end
    $var wire  1 [ rs1_ex_fwd $end
    $var wire  1 \ rs1_mem_ex_fwd $end
    $var wire  1 ] rs1_mem_fwd $end
    $var wire  1 Y rs1_not_x0 $end
    $var wire 32 - rs1_rdata_i [31:0] $end
    $var wire  5 , rs2 [4:0] $end
    $var wire  1 ^ rs2_ex_fwd $end
    $var wire  1 _ rs2_mem_ex_fwd $end
    $var wire  1 ` rs2_mem_fwd $end
    $var wire  1 Z rs2_not_x0 $end
    $var wire 32 - rs2_rdata_i [31:0] $end
   $upscope $end
   $scope module if_id_u $end
    $var wire  1 a! clk $end
    $var wire 32 ( if_id_instr_o [31:0] $end
    $var wire 32 ' if_id_pc_o [31:0] $end
    $var wire  1 c! if_id_prdt_taken_o $end
    $var wire 32 % if_instr_i [31:0] $end
    $var wire 32 $ if_pc_i [31:0] $end
    $var wire  1 & if_prdt_taken_i $end
    $var wire  1 b! rst_n $end
    $var wire  1 f! stall_i $end
    $var wire  1 g! wen $end
    $scope module instr_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 % din [31:0] $end
     $var wire 32 ( qout [31:0] $end
     $var wire 32 ( qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 $ din [31:0] $end
     $var wire 32 ' qout [31:0] $end
     $var wire 32 ' qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
   $upscope $end
   $scope module if_u $end
    $var wire  1 J dec_bjp $end
    $var wire 32 O dec_bjp_imm [31:0] $end
    $var wire  1 K dec_bxx $end
    $var wire  1 L dec_jal $end
    $var wire  1 M dec_jalr $end
    $var wire  5 N dec_jalr_rs1_idx [4:0] $end
    $var wire 32 % if_instr_o [31:0] $end
    $var wire 32 # if_pc_next_o [31:0] $end
    $var wire 32 $ if_pc_o [31:0] $end
    $var wire  1 & if_prdt_taken_o $end
    $var wire 32 $ if_req_pc [31:0] $end
    $var wire  1 g! if_req_ready $end
    $var wire  1 g! if_req_valid $end
    $var wire  1 f! if_resp_err $end
    $var wire 32 % if_resp_instr [31:0] $end
    $var wire  1 g! if_resp_ready $end
    $var wire  1 g! if_resp_valid $end
    $var wire 32 % instr [31:0] $end
    $var wire  1 P jalr_rs1_x0 $end
    $var wire  1 Q jalr_rs1_x1 $end
    $var wire 32 S pc_add_op1 [31:0] $end
    $var wire 32 T pc_add_op2 [31:0] $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 32 R prdt_pc_add_op1 [31:0] $end
    $var wire 32 O prdt_pc_add_op2 [31:0] $end
    $var wire  1 & prdt_taken $end
    $scope module fetch_if2icb_u $end
     $var wire 32 $ if_req_pc_i [31:0] $end
     $var wire  1 g! if_req_ready_o $end
     $var wire  1 g! if_req_valid_i $end
     $var wire  1 f! if_resp_err_o $end
     $var wire 32 % if_resp_instr_o [31:0] $end
     $var wire  1 g! if_resp_ready_i $end
     $var wire  1 g! if_resp_valid_o $end
     $var wire 32 % instr [31:0] $end
     $var wire 32 $ pc [31:0] $end
    $upscope $end
    $scope module mini_dec_u $end
     $var wire 32 V bjp_imm_bxx [31:0] $end
     $var wire 32 W bjp_imm_jal [31:0] $end
     $var wire 32 X bjp_imm_jalr [31:0] $end
     $var wire 32 O dec_bjp_imm_o [31:0] $end
     $var wire  1 J dec_bjp_o $end
     $var wire  1 K dec_bxx_o $end
     $var wire  1 L dec_jal_o $end
     $var wire  1 M dec_jalr_o $end
     $var wire  5 N dec_jalr_rs1_idx_o [4:0] $end
     $var wire 32 % instr_i [31:0] $end
     $var wire  7 U opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module mem_u $end
    $var wire  1 a! clk $end
    $var wire 32 B ex_mem_alu_res_i [31:0] $end
    $var wire 32 A ex_mem_instr_i [31:0] $end
    $var wire 32 e! ex_mem_rs2_rdata_i [31:0] $end
    $var wire 32 `! i [31:0] $end
    $var wire  1 G ld $end
    $var wire 32 B mem_addr [31:0] $end
    $var wire  1 G mem_rd_en_o $end
    $var wire  5 F mem_rd_idx_o [4:0] $end
    $var wire 32 H mem_rd_wdata_o [31:0] $end
    $var wire  1 G mem_ren $end
    $var wire 32 e! mem_wdata [31:0] $end
    $var wire  1 _! mem_wen $end
    $var wire  7 ^! opcode [6:0] $end
    $var wire  1 b! rst_n $end
    $var wire  1 _! st $end
   $upscope $end
   $scope module pc_reg_u $end
    $var wire  1 a! clk $end
    $var wire 32 I pc_din [31:0] $end
    $var wire 32 # pc_next_i [31:0] $end
    $var wire 32 $ pc_o [31:0] $end
    $var wire  1 d! pipe_flush_i $end
    $var wire 32 < pipe_flush_pc_i [31:0] $end
    $var wire  1 b! rst_n $end
    $var wire  1 f! stall_i $end
    $var wire  1 g! wen $end
    $scope module pc_dff $end
     $var wire 32 h! DW [31:0] $end
     $var wire 32 i! RESET_VAL [31:0] $end
     $var wire  1 a! clk $end
     $var wire 32 I din [31:0] $end
     $var wire 32 $ qout [31:0] $end
     $var wire 32 $ qout_r [31:0] $end
     $var wire  1 b! rst_n $end
     $var wire  1 g! wen $end
    $upscope $end
   $upscope $end
   $scope module regfile_u $end
    $var wire  1 a! clk $end
    $var wire 32 %! i [31:0] $end
    $var wire  1 j! rd_en_i $end
    $var wire  5 k! rd_idx_i [4:0] $end
    $var wire 32 l! rd_wdata_i [31:0] $end
    $var wire 32 d reg_data(1) [31:0] $end
    $var wire 32 m reg_data(10) [31:0] $end
    $var wire 32 n reg_data(11) [31:0] $end
    $var wire 32 o reg_data(12) [31:0] $end
    $var wire 32 p reg_data(13) [31:0] $end
    $var wire 32 q reg_data(14) [31:0] $end
    $var wire 32 r reg_data(15) [31:0] $end
    $var wire 32 s reg_data(16) [31:0] $end
    $var wire 32 t reg_data(17) [31:0] $end
    $var wire 32 u reg_data(18) [31:0] $end
    $var wire 32 v reg_data(19) [31:0] $end
    $var wire 32 e reg_data(2) [31:0] $end
    $var wire 32 w reg_data(20) [31:0] $end
    $var wire 32 x reg_data(21) [31:0] $end
    $var wire 32 y reg_data(22) [31:0] $end
    $var wire 32 z reg_data(23) [31:0] $end
    $var wire 32 { reg_data(24) [31:0] $end
    $var wire 32 | reg_data(25) [31:0] $end
    $var wire 32 } reg_data(26) [31:0] $end
    $var wire 32 ~ reg_data(27) [31:0] $end
    $var wire 32 !! reg_data(28) [31:0] $end
    $var wire 32 "! reg_data(29) [31:0] $end
    $var wire 32 f reg_data(3) [31:0] $end
    $var wire 32 #! reg_data(30) [31:0] $end
    $var wire 32 $! reg_data(31) [31:0] $end
    $var wire 32 g reg_data(4) [31:0] $end
    $var wire 32 h reg_data(5) [31:0] $end
    $var wire 32 i reg_data(6) [31:0] $end
    $var wire 32 j reg_data(7) [31:0] $end
    $var wire 32 k reg_data(8) [31:0] $end
    $var wire 32 l reg_data(9) [31:0] $end
    $var wire 32 h! reg_num [31:0] $end
    $var wire  1 ) rs1_en_i $end
    $var wire  5 + rs1_idx_i [4:0] $end
    $var wire 32 - rs1_rdata_o [31:0] $end
    $var wire 32 m! rs1_x1_rdata_o [31:0] $end
    $var wire  1 * rs2_en_i $end
    $var wire  5 , rs2_idx_i [4:0] $end
    $var wire 32 . rs2_rdata_o [31:0] $end
    $var wire  1 b! rst_n $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000100 #
b00000000000000000000000000000000 $
b00000000001000111000001110010011 %
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
03
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
b00000 :
0;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000 >
0?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000 C
0D
b00000000000000000000000000000000 E
b00000 F
0G
b00000000000000000000000000000000 H
b00000000000000000000000000000100 I
0J
0K
0L
0M
b00111 N
b00000000000000000000000000000000 O
0P
0Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000100 T
b0010011 U
b00000000000000000000100000000110 V
b00000000000000111000000000000010 W
b00000000000000000000000000000010 X
0Y
0Z
0[
0\
0]
0^
0_
0`
b0000000 a
b000 b
b0000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b0000000 &!
b000 '!
b0000000 (!
0)!
0*!
0+!
0,!
0-!
0.!
0/!
00!
01!
12!
03!
04!
05!
06!
07!
08!
09!
0:!
0;!
0<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 J!
b00000000000000000000000000000000 K!
b00000000000000000000000000000000 L!
0M!
0N!
0O!
0P!
0Q!
0R!
0S!
0T!
0U!
0V!
0W!
0X!
0Y!
0Z!
0[!
0\!
b00000000000000000000000000000000 ]!
b0000000 ^!
0_!
b00000000000000000000000000000000 `!
1a!
1b!
0c!
0d!
b00000000000000000000000000000000 e!
0f!
1g!
b00000000000000000000000000100000 h!
b00000000000000000000000000000000 i!
0j!
b00000 k!
b00000000000000000000000000000000 l!
b00000000000000000000000000000000 m!
b00000000000000000000000000000101 n!
b00000000000000000000000000000001 o!
b00000000000000000000000000000000 p!
b00000000000000000000000000000000 q!
b00000000000000000000000000000000 r!
#1
0a!
#2
b00000000000000000000000000001000 #
b00000000000000000000000000000100 $
b00000000000100110000001100010011 %
b00000000001000111000001110010011 (
1)
b00111 +
b00010 ,
b00000000000000000000000000000010 1
b00111 2
13
b00000000000000000000000000001000 I
b00110 N
b00000000000000000000000000000100 R
b00000000000000000000000000000100 S
b00000000000000000000000000000110 V
b00000000000000110000100000000000 W
b00000000000000000000000000000001 X
1Y
1Z
b0010011 a
1a!
#3
0a!
#4
b00000000000000000000000000001100 #
b00000000000000000000000000001000 $
b00000000011100110000001010110011 %
b00000000000000000000000000000100 '
b00000000000100110000001100010011 (
b00110 +
b00001 ,
b00000000000000000000000000000001 1
b00110 2
b00000000001000111000001110010011 5
b00000000000000000000000000000010 8
b00111 :
1;
b00000000000000000000000000000010 <
b00000000000000000000000000000010 =
b00111 >
1?
b00000000000000000000000000001100 I
b00000000000000000000000000001000 R
b00000000000000000000000000001000 S
b0110011 U
b00000000000000000000100000000100 V
b00000000000000110000100000000110 W
b00000000000000000000000000000111 X
b0010011 &!
1*!
11!
1;!
b00000000000000000000000000000010 F!
b00000000000000000000000000000010 G!
b11111111111111111111111111111110 H!
b00000000000000000000000000000010 J!
b00000000000000000000000000000010 K!
b00000000000000000000000000000001 L!
1S!
1T!
b00000000000000000000000000000010 ]!
1a!
#5
0a!
#6
b00000000000000000000000000010000 #
b00000000000000000000000000001100 $
b00000000010101010010010000100011 %
b00000000000000000000000000001000 '
b00000000011100110000001010110011 (
1*
b00111 ,
b00000000000000000000000000000001 /
b00000000000000000000000000000010 0
b00000000000000000000000000000000 1
b00101 2
b00000000000000000000000000000100 4
b00000000000100110000001100010011 5
b00000000000000000000000000000001 8
b00110 :
b00000000000000000000000000000101 <
b00000000000000000000000000000001 =
b00110 >
b00000000001000111000001110010011 A
b00000000000000000000000000000010 B
b00111 C
1D
b00000000000000000000000000000010 E
b00111 F
b00000000000000000000000000010000 I
b01010 N
b00000000000000000000000000001100 R
b00000000000000000000000000001100 S
b0100011 U
b00000000000000000000000000001000 V
b00000000000001010010100000000100 W
b00000000000000000000000000000101 X
1[
1_
b0110011 a
b00000000000000000000000000000001 F!
b00000000000000000000000000000001 G!
b11111111111111111111111111111111 H!
b00000000000000000000000000000001 J!
b00000000000000000000000000000001 K!
b00000000000000000000000000000001 ]!
b0010011 ^!
1a!
#7
0a!
#8
b00000000000000000000000000010100 #
b00000000000000000000000000010000 $
b00000000000000000000000000000000 %
b00000000000000000000000000001100 '
b00000000010101010010010000100011 (
b01010 +
b00101 ,
b00000000000000000000000000000000 /
b00000000000000000000000000000011 0
b00000000000000000000000000001000 1
b01000 2
03
b00000000000000000000000000001000 4
b00000000011100110000001010110011 5
b00000000000000000000000000000001 6
b00000000000000000000000000000010 7
b00000000000000000000000000000000 8
b00101 :
b00000000000000000000000000001000 <
b00000000000000000000000000000011 =
b00101 >
b00000000000000000000000000000100 @
b00000000000100110000001100010011 A
b00000000000000000000000000000001 B
b00110 C
b00000000000000000000000000000001 E
b00110 F
b00000000000000000000000000010100 I
b00000 N
1P
b00000000000000000000000000010000 R
b00000000000000000000000000010000 S
b0000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
0[
1^
0_
b0100011 a
b010 b
b0110011 &!
1)!
0*!
b00000000000000000000000000000001 E!
b00000000000000000000000000000010 F!
b00000000000000000000000000000011 G!
b00000000000000000000000000000011 J!
b00000000000000000000000000000011 K!
b00000000000000000000000000000000 ]!
1a!
#9
0a!
#10
b00000000000000000000000000011000 #
b00000000000000000000000000010100 $
b00000000000000000000000000010000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
b00000000000000000000000000001100 4
b00000000010101010010010000100011 5
b00000000000000000000000000000000 6
b00000000000000000000000000000011 7
b00000000000000000000000000001000 8
b01000 :
0;
b00000000000000000000000000010100 <
b00000000000000000000000000001000 =
b01000 >
0?
b00000000000000000000000000001000 @
b00000000011100110000001010110011 A
b00000000000000000000000000000011 B
b00101 C
b00000000000000000000000000000011 E
b00101 F
b00000000000000000000000000011000 I
b00000000000000000000000000010100 R
b00000000000000000000000000010100 S
0Y
0Z
0^
b0000000 a
b000 b
b0100011 &!
b010 '!
0)!
1+!
01!
02!
14!
b00000000000000000000000000000000 E!
b00000000000000000000000000001000 F!
b00000000000000000000000000001000 G!
b11111111111111111111111111111000 H!
b00000000000000000000000000001000 J!
b00000000000000000000000000001000 K!
b00000000000000000000000000001000 ]!
b0110011 ^!
1a!
#11
0a!
#12
b00000000000000000000000000011100 #
b00000000000000000000000000011000 $
b00000000000000000000000000010100 '
b00000000000000000000000000010000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000 :
b00000000000000000000000000010000 <
b00000000000000000000000000000000 =
b00000 >
b00000000000000000000000000001100 @
b00000000010101010010010000100011 A
b00000000000000000000000000001000 B
b01000 C
0D
b00000000000000000000000000001000 E
b01000 F
b00000000000000000000000000011100 I
b00000000000000000000000000011000 R
b00000000000000000000000000011000 S
b0000000 &!
b000 '!
0+!
12!
04!
0;!
b00000000000000000000000000000000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 J!
b00000000000000000000000000000000 K!
b00000000000000000000000000000000 L!
0S!
0T!
b00000000000000000000000000000000 ]!
b0100011 ^!
1_!
1a!
#13
0a!
#14
b00000000000000000000000000100000 #
b00000000000000000000000000011100 $
b00000000000000000000000000011000 '
b00000000000000000000000000010100 4
b00000000000000000000000000010100 <
b00000000000000000000000000010000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000 C
b00000000000000000000000000000000 E
b00000 F
b00000000000000000000000000100000 I
b00000000000000000000000000011100 R
b00000000000000000000000000011100 S
b0000000 ^!
0_!
1a!
#15
0a!
#16
b00000000000000000000000000100100 #
b00000000000000000000000000100000 $
b00000000000000000000000000011100 '
b00000000000000000000000000011000 4
b00000000000000000000000000011000 <
b00000000000000000000000000010100 @
b00000000000000000000000000100100 I
b00000000000000000000000000100000 R
b00000000000000000000000000100000 S
1a!
#17
0a!
#18
b00000000000000000000000000101000 #
b00000000000000000000000000100100 $
b00000000000000000000000000100000 '
b00000000000000000000000000011100 4
b00000000000000000000000000011100 <
b00000000000000000000000000011000 @
b00000000000000000000000000101000 I
b00000000000000000000000000100100 R
b00000000000000000000000000100100 S
1a!
#19
0a!
