$version Generated by VerilatedVcd $end
$date Sun Dec 11 11:35:52 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 l! clk $end
  $var wire  1 m! rst_n $end
  $scope module riscx $end
   $var wire  1 l! clk $end
   $var wire 32 1 dec_imm [31:0] $end
   $var wire 32 ( dec_instr [31:0] $end
   $var wire 32 ' dec_pc [31:0] $end
   $var wire  1 3 dec_rd_en $end
   $var wire  5 2 dec_rd_idx [4:0] $end
   $var wire  1 ) dec_rs1_en $end
   $var wire  5 + dec_rs1_idx [4:0] $end
   $var wire 32 / dec_rs1_rdata [31:0] $end
   $var wire  1 * dec_rs2_en $end
   $var wire  5 , dec_rs2_idx [4:0] $end
   $var wire 32 0 dec_rs2_rdata [31:0] $end
   $var wire 32 = ex_alu_res [31:0] $end
   $var wire 32 C ex_mem_alu_res [31:0] $end
   $var wire  1 E ex_mem_ex_rd_en $end
   $var wire  5 D ex_mem_ex_rd_idx [4:0] $end
   $var wire 32 F ex_mem_ex_rd_wdata [31:0] $end
   $var wire 32 A ex_mem_instr [31:0] $end
   $var wire 32 @ ex_mem_pc [31:0] $end
   $var wire 32 B ex_mem_rs2_rdata [31:0] $end
   $var wire  1 o! ex_pipe_flush $end
   $var wire 32 < ex_pipe_flush_pc [31:0] $end
   $var wire  1 ? ex_rd_en $end
   $var wire  5 > ex_rd_idx [4:0] $end
   $var wire 32 = ex_rd_wdata [31:0] $end
   $var wire 32 8 id_ex_imm [31:0] $end
   $var wire 32 5 id_ex_instr [31:0] $end
   $var wire 32 4 id_ex_pc [31:0] $end
   $var wire  1 9 id_ex_prdt_taken $end
   $var wire  1 ; id_ex_rd_en $end
   $var wire  5 : id_ex_rd_idx [4:0] $end
   $var wire 32 6 id_ex_rs1_rdata [31:0] $end
   $var wire 32 7 id_ex_rs2_rdata [31:0] $end
   $var wire 32 ( if_id_instr [31:0] $end
   $var wire 32 ' if_id_pc [31:0] $end
   $var wire  1 n! if_id_prdt_taken $end
   $var wire 32 % if_instr [31:0] $end
   $var wire 32 $ if_pc [31:0] $end
   $var wire 32 # if_pc_next [31:0] $end
   $var wire  1 & if_prdt_taken $end
   $var wire  1 H mem_rd_en $end
   $var wire  5 G mem_rd_idx [4:0] $end
   $var wire 32 I mem_rd_wdata [31:0] $end
   $var wire  1 L mem_wb_ex_rd_en $end
   $var wire  5 K mem_wb_ex_rd_idx [4:0] $end
   $var wire 32 M mem_wb_ex_rd_wdata [31:0] $end
   $var wire  1 O mem_wb_mem_rd_en $end
   $var wire  5 N mem_wb_mem_rd_idx [4:0] $end
   $var wire 32 P mem_wb_mem_rd_wdata [31:0] $end
   $var wire 32 J mem_wb_pc [31:0] $end
   $var wire 32 $ pr_pc [31:0] $end
   $var wire 32 - rf_rs1_rdata [31:0] $end
   $var wire 32 . rf_rs2_rdata [31:0] $end
   $var wire  1 m! rst_n $end
   $var wire  1 R wb_rd_en $end
   $var wire  5 Q wb_rd_idx [4:0] $end
   $var wire 32 S wb_rd_wdata [31:0] $end
   $scope module ex_mem_u $end
    $var wire  1 l! clk $end
    $var wire 32 = ex_alu_res_i [31:0] $end
    $var wire 32 5 ex_instr_i [31:0] $end
    $var wire 32 C ex_mem_alu_res_o [31:0] $end
    $var wire  1 E ex_mem_ex_rd_en_o $end
    $var wire  5 D ex_mem_ex_rd_idx_o [4:0] $end
    $var wire 32 F ex_mem_ex_rd_wdata_o [31:0] $end
    $var wire 32 A ex_mem_instr_o [31:0] $end
    $var wire 32 @ ex_mem_pc_o [31:0] $end
    $var wire 32 B ex_mem_rs2_rdata_o [31:0] $end
    $var wire 32 4 ex_pc_i [31:0] $end
    $var wire  1 ? ex_rd_en_i $end
    $var wire  5 > ex_rd_idx_i [4:0] $end
    $var wire 32 = ex_rd_wdata_i [31:0] $end
    $var wire 32 7 ex_rs2_rdata_i [31:0] $end
    $var wire  1 m! rst_n $end
    $var wire  1 q! wen $end
    $scope module alu_res_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 = din [31:0] $end
     $var wire 32 C qout [31:0] $end
     $var wire 32 C qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module ex_rd_en_dff $end
     $var wire 32 v! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  1 ? din [0:0] $end
     $var wire  1 E qout [0:0] $end
     $var wire  1 E qout_r [0:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module ex_rd_idx_dff $end
     $var wire 32 u! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  5 > din [4:0] $end
     $var wire  5 D qout [4:0] $end
     $var wire  5 D qout_r [4:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module ex_rd_wdata_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 = din [31:0] $end
     $var wire 32 F qout [31:0] $end
     $var wire 32 F qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 5 din [31:0] $end
     $var wire 32 A qout [31:0] $end
     $var wire 32 A qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 4 din [31:0] $end
     $var wire 32 @ qout [31:0] $end
     $var wire 32 @ qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module rs2_rdata_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 7 din [31:0] $end
     $var wire 32 B qout [31:0] $end
     $var wire 32 B qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
   $upscope $end
   $scope module ex_u $end
    $var wire 32 R! add_res [31:0] $end
    $var wire  1 4! al $end
    $var wire  1 <! al_ali $end
    $var wire  1 5! ali $end
    $var wire 32 P! alu_op1 [31:0] $end
    $var wire 32 Q! alu_op2 [31:0] $end
    $var wire 32 T! and_res [31:0] $end
    $var wire  1 ;! auipc $end
    $var wire  1 X! beq $end
    $var wire  1 `! beq_res $end
    $var wire  1 [! bge $end
    $var wire  1 c! bge_res $end
    $var wire  1 ]! bgeu $end
    $var wire  1 e! bgeu_res $end
    $var wire  1 Z! blt $end
    $var wire  1 b! blt_res $end
    $var wire  1 \! bltu $end
    $var wire  1 d! bltu_res $end
    $var wire  1 Y! bne $end
    $var wire  1 a! bne_res $end
    $var wire  1 7! branch $end
    $var wire  1 f! branch_res $end
    $var wire  1 7! bxx $end
    $var wire 32 = ex_alu_res_o [31:0] $end
    $var wire  1 o! ex_pipe_flush_o $end
    $var wire 32 < ex_pipe_flush_pc_o [31:0] $end
    $var wire  1 ? ex_rd_en_o $end
    $var wire  5 > ex_rd_idx_o [4:0] $end
    $var wire 32 = ex_rd_wdata_o [31:0] $end
    $var wire  3 2! fun3 [2:0] $end
    $var wire  7 3! fun7 [6:0] $end
    $var wire  1 =! fun_add $end
    $var wire  1 E! fun_and $end
    $var wire  1 D! fun_or $end
    $var wire  1 >! fun_sll $end
    $var wire  1 ?! fun_slt $end
    $var wire  1 @! fun_sltu $end
    $var wire  1 C! fun_sra $end
    $var wire  1 B! fun_srl $end
    $var wire  1 A! fun_xor $end
    $var wire 32 8 imm_i [31:0] $end
    $var wire 32 5 instr_i [31:0] $end
    $var wire  1 8! jal $end
    $var wire  1 9! jalr $end
    $var wire  1 6! ld_st $end
    $var wire  1 _! lt $end
    $var wire  1 :! lui $end
    $var wire  1 ^! neq $end
    $var wire  1 F! op_add $end
    $var wire  1 K! op_and $end
    $var wire  1 L! op_or $end
    $var wire  1 H! op_sll $end
    $var wire  1 N! op_slt $end
    $var wire  1 O! op_sltu $end
    $var wire  1 J! op_sra $end
    $var wire  1 I! op_srl $end
    $var wire  1 G! op_sub $end
    $var wire  1 M! op_xor $end
    $var wire  7 1! opcode [6:0] $end
    $var wire 32 U! or_res [31:0] $end
    $var wire 32 4 pc_i [31:0] $end
    $var wire  1 g! pipe_flush $end
    $var wire 32 4 pipe_flush_pc_op1 [31:0] $end
    $var wire 32 h! pipe_flush_pc_op2 [31:0] $end
    $var wire  1 9 prdt_taken $end
    $var wire  5 > rd [4:0] $end
    $var wire  1 ; rd_en_i $end
    $var wire  5 : rd_idx_i [4:0] $end
    $var wire 32 6 rs1_rdata_i [31:0] $end
    $var wire 32 7 rs2_rdata_i [31:0] $end
    $var wire 32 w! sll_res [31:0] $end
    $var wire 32 W! slt_res [31:0] $end
    $var wire 32 W! sltu_res [31:0] $end
    $var wire 32 y! sra_res [31:0] $end
    $var wire 32 x! srl_res [31:0] $end
    $var wire 32 S! sub_res [31:0] $end
    $var wire 32 V! xor_res [31:0] $end
   $upscope $end
   $scope module id_ex_u $end
    $var wire  1 l! clk $end
    $var wire 32 1 dec_imm_i [31:0] $end
    $var wire 32 ( dec_instr_i [31:0] $end
    $var wire 32 ' dec_pc_i [31:0] $end
    $var wire  1 3 dec_rd_en_i $end
    $var wire  5 2 dec_rd_idx_i [4:0] $end
    $var wire 32 / dec_rs1_rdata_i [31:0] $end
    $var wire 32 0 dec_rs2_rdata_i [31:0] $end
    $var wire 32 8 id_ex_imm_o [31:0] $end
    $var wire 32 5 id_ex_instr_o [31:0] $end
    $var wire 32 4 id_ex_pc_o [31:0] $end
    $var wire  1 9 id_ex_prdt_taken_o $end
    $var wire  1 ; id_ex_rd_en_o $end
    $var wire  5 : id_ex_rd_idx_o [4:0] $end
    $var wire 32 6 id_ex_rs1_rdata_o [31:0] $end
    $var wire 32 7 id_ex_rs2_rdata_o [31:0] $end
    $var wire  1 n! if_id_prdt_taken_i $end
    $var wire  1 m! rst_n $end
    $var wire  1 p! stall_i $end
    $var wire  1 q! wen $end
    $scope module alu_fun_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 1 din [31:0] $end
     $var wire 32 8 qout [31:0] $end
     $var wire 32 8 qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module alu_op1_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 / din [31:0] $end
     $var wire 32 6 qout [31:0] $end
     $var wire 32 6 qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module alu_op2_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 0 din [31:0] $end
     $var wire 32 7 qout [31:0] $end
     $var wire 32 7 qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module instr_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 ( din [31:0] $end
     $var wire 32 5 qout [31:0] $end
     $var wire 32 5 qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 ' din [31:0] $end
     $var wire 32 4 qout [31:0] $end
     $var wire 32 4 qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module prdt_taken_dff $end
     $var wire 32 v! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  1 n! din [0:0] $end
     $var wire  1 9 qout [0:0] $end
     $var wire  1 9 qout_r [0:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module rd_en_dff $end
     $var wire 32 v! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  1 3 din [0:0] $end
     $var wire  1 ; qout [0:0] $end
     $var wire  1 ; qout_r [0:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module rd_idx_dff $end
     $var wire 32 u! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  5 2 din [4:0] $end
     $var wire  5 : qout [4:0] $end
     $var wire  5 : qout_r [4:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
   $upscope $end
   $scope module id_u $end
    $var wire 32 1 dec_imm_o [31:0] $end
    $var wire 32 ( dec_instr_o [31:0] $end
    $var wire 32 ' dec_pc_o [31:0] $end
    $var wire  1 3 dec_rd_en_o $end
    $var wire  5 2 dec_rd_idx_o [4:0] $end
    $var wire  1 ) dec_rs1_en_o $end
    $var wire  5 + dec_rs1_idx_o [4:0] $end
    $var wire 32 / dec_rs1_rdata_o [31:0] $end
    $var wire  1 * dec_rs2_en_o $end
    $var wire  5 , dec_rs2_idx_o [4:0] $end
    $var wire 32 0 dec_rs2_rdata_o [31:0] $end
    $var wire  1 E ex_mem_ex_rd_en_i $end
    $var wire  5 D ex_mem_ex_rd_idx_i [4:0] $end
    $var wire 32 F ex_mem_ex_rd_wdata_i [31:0] $end
    $var wire  1 ? ex_rd_en_i $end
    $var wire  5 > ex_rd_idx_i [4:0] $end
    $var wire 32 = ex_rd_wdata_i [31:0] $end
    $var wire  3 m fun3 [2:0] $end
    $var wire  7 n fun7 [6:0] $end
    $var wire 32 ( instr_i [31:0] $end
    $var wire  1 H mem_rd_en_i $end
    $var wire  5 G mem_rd_idx_i [4:0] $end
    $var wire 32 I mem_rd_wdata_i [31:0] $end
    $var wire  7 l opcode [6:0] $end
    $var wire 32 ' pc_i [31:0] $end
    $var wire  5 2 rd [4:0] $end
    $var wire  5 + rs1 [4:0] $end
    $var wire  1 f rs1_ex_fwd $end
    $var wire  1 g rs1_mem_ex_fwd $end
    $var wire  1 h rs1_mem_fwd $end
    $var wire  1 d rs1_not_x0 $end
    $var wire 32 - rs1_rdata_i [31:0] $end
    $var wire  5 , rs2 [4:0] $end
    $var wire  1 i rs2_ex_fwd $end
    $var wire  1 j rs2_mem_ex_fwd $end
    $var wire  1 k rs2_mem_fwd $end
    $var wire  1 e rs2_not_x0 $end
    $var wire 32 - rs2_rdata_i [31:0] $end
   $upscope $end
   $scope module if_id_u $end
    $var wire  1 l! clk $end
    $var wire 32 ( if_id_instr_o [31:0] $end
    $var wire 32 ' if_id_pc_o [31:0] $end
    $var wire  1 n! if_id_prdt_taken_o $end
    $var wire 32 % if_instr_i [31:0] $end
    $var wire 32 $ if_pc_i [31:0] $end
    $var wire  1 & if_prdt_taken_i $end
    $var wire  1 m! rst_n $end
    $var wire  1 p! stall_i $end
    $var wire  1 q! wen $end
    $scope module instr_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 % din [31:0] $end
     $var wire 32 ( qout [31:0] $end
     $var wire 32 ( qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 $ din [31:0] $end
     $var wire 32 ' qout [31:0] $end
     $var wire 32 ' qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
   $upscope $end
   $scope module if_u $end
    $var wire  1 U dec_bjp $end
    $var wire 32 Z dec_bjp_imm [31:0] $end
    $var wire  1 V dec_bxx $end
    $var wire  1 W dec_jal $end
    $var wire  1 X dec_jalr $end
    $var wire  5 Y dec_jalr_rs1_idx [4:0] $end
    $var wire 32 % if_instr_o [31:0] $end
    $var wire 32 # if_pc_next_o [31:0] $end
    $var wire 32 $ if_pc_o [31:0] $end
    $var wire  1 & if_prdt_taken_o $end
    $var wire 32 $ if_req_pc [31:0] $end
    $var wire  1 q! if_req_ready $end
    $var wire  1 q! if_req_valid $end
    $var wire  1 p! if_resp_err $end
    $var wire 32 % if_resp_instr [31:0] $end
    $var wire  1 q! if_resp_ready $end
    $var wire  1 q! if_resp_valid $end
    $var wire 32 % instr [31:0] $end
    $var wire  1 [ jalr_rs1_x0 $end
    $var wire  1 \ jalr_rs1_x1 $end
    $var wire 32 ^ pc_add_op1 [31:0] $end
    $var wire 32 _ pc_add_op2 [31:0] $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 32 ] prdt_pc_add_op1 [31:0] $end
    $var wire 32 Z prdt_pc_add_op2 [31:0] $end
    $var wire  1 & prdt_taken $end
    $scope module fetch_if2icb_u $end
     $var wire 32 $ if_req_pc_i [31:0] $end
     $var wire  1 q! if_req_ready_o $end
     $var wire  1 q! if_req_valid_i $end
     $var wire  1 p! if_resp_err_o $end
     $var wire 32 % if_resp_instr_o [31:0] $end
     $var wire  1 q! if_resp_ready_i $end
     $var wire  1 q! if_resp_valid_o $end
     $var wire 32 % instr [31:0] $end
     $var wire 32 $ pc [31:0] $end
    $upscope $end
    $scope module mini_dec_u $end
     $var wire 32 a bjp_imm_bxx [31:0] $end
     $var wire 32 b bjp_imm_jal [31:0] $end
     $var wire 32 c bjp_imm_jalr [31:0] $end
     $var wire 32 Z dec_bjp_imm_o [31:0] $end
     $var wire  1 U dec_bjp_o $end
     $var wire  1 V dec_bxx_o $end
     $var wire  1 W dec_jal_o $end
     $var wire  1 X dec_jalr_o $end
     $var wire  5 Y dec_jalr_rs1_idx_o [4:0] $end
     $var wire 32 % instr_i [31:0] $end
     $var wire  7 ` opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module mem_u $end
    $var wire  1 l! clk $end
    $var wire 32 C ex_mem_alu_res_i [31:0] $end
    $var wire 32 A ex_mem_instr_i [31:0] $end
    $var wire 32 B ex_mem_rs2_rdata_i [31:0] $end
    $var wire 32 k! i [31:0] $end
    $var wire  1 H ld $end
    $var wire 32 C mem_addr [31:0] $end
    $var wire  1 H mem_rd_en_o $end
    $var wire  5 G mem_rd_idx_o [4:0] $end
    $var wire 32 I mem_rd_wdata_o [31:0] $end
    $var wire  1 H mem_ren $end
    $var wire 32 B mem_wdata [31:0] $end
    $var wire  1 j! mem_wen $end
    $var wire  7 i! opcode [6:0] $end
    $var wire  1 m! rst_n $end
    $var wire  1 j! st $end
   $upscope $end
   $scope module mem_wb_u $end
    $var wire  1 l! clk $end
    $var wire  1 E ex_mem_ex_rd_en_i $end
    $var wire  5 D ex_mem_ex_rd_idx_i [4:0] $end
    $var wire 32 F ex_mem_ex_rd_wdata_i [31:0] $end
    $var wire 32 @ ex_mem_pc_i [31:0] $end
    $var wire  1 H mem_rd_en_i $end
    $var wire  5 G mem_rd_idx_i [4:0] $end
    $var wire 32 I mem_rd_wdata_i [31:0] $end
    $var wire  1 L mem_wb_ex_rd_en_o $end
    $var wire  5 K mem_wb_ex_rd_idx_o [4:0] $end
    $var wire 32 M mem_wb_ex_rd_wdata_o [31:0] $end
    $var wire  1 O mem_wb_mem_rd_en_o $end
    $var wire  5 N mem_wb_mem_rd_idx_o [4:0] $end
    $var wire 32 P mem_wb_mem_rd_wdata_o [31:0] $end
    $var wire 32 J mem_wb_pc_o [31:0] $end
    $var wire  1 m! rst_n $end
    $var wire  1 q! wen $end
    $scope module ex_rd_en_dff $end
     $var wire 32 v! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  1 E din [0:0] $end
     $var wire  1 L qout [0:0] $end
     $var wire  1 L qout_r [0:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module ex_rd_idx_dff $end
     $var wire 32 u! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  5 D din [4:0] $end
     $var wire  5 K qout [4:0] $end
     $var wire  5 K qout_r [4:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module ex_rd_wdata_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 F din [31:0] $end
     $var wire 32 M qout [31:0] $end
     $var wire 32 M qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module mem_rd_en_dff $end
     $var wire 32 v! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  1 H din [0:0] $end
     $var wire  1 O qout [0:0] $end
     $var wire  1 O qout_r [0:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module mem_rd_idx_dff $end
     $var wire 32 u! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire  5 G din [4:0] $end
     $var wire  5 N qout [4:0] $end
     $var wire  5 N qout_r [4:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module mem_rd_wdata_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 I din [31:0] $end
     $var wire 32 P qout [31:0] $end
     $var wire 32 P qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
    $scope module pc_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 @ din [31:0] $end
     $var wire 32 J qout [31:0] $end
     $var wire 32 J qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
   $upscope $end
   $scope module pc_reg_u $end
    $var wire  1 l! clk $end
    $var wire 32 T pc_din [31:0] $end
    $var wire 32 # pc_next_i [31:0] $end
    $var wire 32 $ pc_o [31:0] $end
    $var wire  1 o! pipe_flush_i $end
    $var wire 32 < pipe_flush_pc_i [31:0] $end
    $var wire  1 m! rst_n $end
    $var wire  1 p! stall_i $end
    $var wire  1 q! wen $end
    $scope module pc_dff $end
     $var wire 32 r! DW [31:0] $end
     $var wire 32 s! RESET_VAL [31:0] $end
     $var wire  1 l! clk $end
     $var wire 32 T din [31:0] $end
     $var wire 32 $ qout [31:0] $end
     $var wire 32 $ qout_r [31:0] $end
     $var wire  1 m! rst_n $end
     $var wire  1 q! wen $end
    $upscope $end
   $upscope $end
   $scope module regfile_u $end
    $var wire  1 l! clk $end
    $var wire 32 0! i [31:0] $end
    $var wire  1 R rd_en_i $end
    $var wire  5 Q rd_idx_i [4:0] $end
    $var wire 32 S rd_wdata_i [31:0] $end
    $var wire 32 o reg_data(1) [31:0] $end
    $var wire 32 x reg_data(10) [31:0] $end
    $var wire 32 y reg_data(11) [31:0] $end
    $var wire 32 z reg_data(12) [31:0] $end
    $var wire 32 { reg_data(13) [31:0] $end
    $var wire 32 | reg_data(14) [31:0] $end
    $var wire 32 } reg_data(15) [31:0] $end
    $var wire 32 ~ reg_data(16) [31:0] $end
    $var wire 32 !! reg_data(17) [31:0] $end
    $var wire 32 "! reg_data(18) [31:0] $end
    $var wire 32 #! reg_data(19) [31:0] $end
    $var wire 32 p reg_data(2) [31:0] $end
    $var wire 32 $! reg_data(20) [31:0] $end
    $var wire 32 %! reg_data(21) [31:0] $end
    $var wire 32 &! reg_data(22) [31:0] $end
    $var wire 32 '! reg_data(23) [31:0] $end
    $var wire 32 (! reg_data(24) [31:0] $end
    $var wire 32 )! reg_data(25) [31:0] $end
    $var wire 32 *! reg_data(26) [31:0] $end
    $var wire 32 +! reg_data(27) [31:0] $end
    $var wire 32 ,! reg_data(28) [31:0] $end
    $var wire 32 -! reg_data(29) [31:0] $end
    $var wire 32 q reg_data(3) [31:0] $end
    $var wire 32 .! reg_data(30) [31:0] $end
    $var wire 32 /! reg_data(31) [31:0] $end
    $var wire 32 r reg_data(4) [31:0] $end
    $var wire 32 s reg_data(5) [31:0] $end
    $var wire 32 t reg_data(6) [31:0] $end
    $var wire 32 u reg_data(7) [31:0] $end
    $var wire 32 v reg_data(8) [31:0] $end
    $var wire 32 w reg_data(9) [31:0] $end
    $var wire 32 r! reg_num [31:0] $end
    $var wire  1 ) rs1_en_i $end
    $var wire  5 + rs1_idx_i [4:0] $end
    $var wire 32 - rs1_rdata_o [31:0] $end
    $var wire 32 t! rs1_x1_rdata_o [31:0] $end
    $var wire  1 * rs2_en_i $end
    $var wire  5 , rs2_idx_i [4:0] $end
    $var wire 32 . rs2_rdata_o [31:0] $end
    $var wire  1 m! rst_n $end
   $upscope $end
   $scope module wb_u $end
    $var wire  1 L mem_wb_ex_rd_en_i $end
    $var wire  5 K mem_wb_ex_rd_idx_i [4:0] $end
    $var wire 32 M mem_wb_ex_rd_wdata_i [31:0] $end
    $var wire  1 O mem_wb_mem_rd_en_i $end
    $var wire  5 N mem_wb_mem_rd_idx_i [4:0] $end
    $var wire 32 P mem_wb_mem_rd_wdata_i [31:0] $end
    $var wire 32 J mem_wb_pc_i [31:0] $end
    $var wire  1 R wb_rd_en_o $end
    $var wire  5 Q wb_rd_idx_o [4:0] $end
    $var wire 32 S wb_rd_wdata_o [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000100 #
b00000000000000000000000000000000 $
b00000000001000111000001110010011 %
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
03
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
b00000 :
0;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000 >
0?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000 D
0E
b00000000000000000000000000000000 F
b00000 G
0H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000 K
0L
b00000000000000000000000000000000 M
b00000 N
0O
b00000000000000000000000000000000 P
b00000 Q
0R
b00000000000000000000000000000000 S
b00000000000000000000000000000100 T
0U
0V
0W
0X
b00111 Y
b00000000000000000000000000000000 Z
0[
0\
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000100 _
b0010011 `
b00000000000000000000100000000110 a
b00000000000000111000000000000010 b
b00000000000000000000000000000010 c
0d
0e
0f
0g
0h
0i
0j
0k
b0000000 l
b000 m
b0000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b0000000 1!
b000 2!
b0000000 3!
04!
05!
06!
07!
08!
09!
0:!
0;!
0<!
1=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
0O!
b00000000000000000000000000000000 P!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
b00000000000000000000000000000000 S!
b00000000000000000000000000000000 T!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 V!
b00000000000000000000000000000000 W!
0X!
0Y!
0Z!
0[!
0\!
0]!
0^!
0_!
0`!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
b00000000000000000000000000000000 h!
b0000000 i!
0j!
b00000000000000000000000000000000 k!
1l!
1m!
0n!
0o!
0p!
1q!
b00000000000000000000000000100000 r!
b00000000000000000000000000000000 s!
b00000000000000000000000000000000 t!
b00000000000000000000000000000101 u!
b00000000000000000000000000000001 v!
b00000000000000000000000000000000 w!
b00000000000000000000000000000000 x!
b00000000000000000000000000000000 y!
#1
0l!
#2
b00000000000000000000000000001000 #
b00000000000000000000000000000100 $
b00000000000100110000001100010011 %
b00000000001000111000001110010011 (
1)
b00111 +
b00010 ,
b00000000000000000000000000000010 1
b00111 2
13
b00000000000000000000000000001000 T
b00110 Y
b00000000000000000000000000000100 ]
b00000000000000000000000000000100 ^
b00000000000000000000000000000110 a
b00000000000000110000100000000000 b
b00000000000000000000000000000001 c
1d
1e
b0010011 l
1l!
#3
0l!
#4
b00000000000000000000000000001100 #
b00000000000000000000000000001000 $
b00000000011100110000001010110011 %
b00000000000000000000000000000100 '
b00000000000100110000001100010011 (
b00110 +
b00001 ,
b00000000000000000000000000000001 1
b00110 2
b00000000001000111000001110010011 5
b00000000000000000000000000000010 8
b00111 :
1;
b00000000000000000000000000000010 <
b00000000000000000000000000000010 =
b00111 >
1?
b00000000000000000000000000001100 T
b00000000000000000000000000001000 ]
b00000000000000000000000000001000 ^
b0110011 `
b00000000000000000000100000000100 a
b00000000000000110000100000000110 b
b00000000000000000000000000000111 c
b0010011 1!
15!
1<!
1F!
b00000000000000000000000000000010 Q!
b00000000000000000000000000000010 R!
b11111111111111111111111111111110 S!
b00000000000000000000000000000010 U!
b00000000000000000000000000000010 V!
b00000000000000000000000000000001 W!
1^!
1_!
b00000000000000000000000000000010 h!
1l!
#5
0l!
#6
b00000000000000000000000000010000 #
b00000000000000000000000000001100 $
b00000000010101010010010000100011 %
b00000000000000000000000000001000 '
b00000000011100110000001010110011 (
1*
b00111 ,
b00000000000000000000000000000001 /
b00000000000000000000000000000010 0
b00000000000000000000000000000000 1
b00101 2
b00000000000000000000000000000100 4
b00000000000100110000001100010011 5
b00000000000000000000000000000001 8
b00110 :
b00000000000000000000000000000101 <
b00000000000000000000000000000001 =
b00110 >
b00000000001000111000001110010011 A
b00000000000000000000000000000010 C
b00111 D
1E
b00000000000000000000000000000010 F
b00111 G
b00000000000000000000000000010000 T
b01010 Y
b00000000000000000000000000001100 ]
b00000000000000000000000000001100 ^
b0100011 `
b00000000000000000000000000001000 a
b00000000000001010010100000000100 b
b00000000000000000000000000000101 c
1f
1j
b0110011 l
b00000000000000000000000000000001 Q!
b00000000000000000000000000000001 R!
b11111111111111111111111111111111 S!
b00000000000000000000000000000001 U!
b00000000000000000000000000000001 V!
b00000000000000000000000000000001 h!
b0010011 i!
1l!
#7
0l!
#8
b00000000000000000000000000010100 #
b00000000000000000000000000010000 $
b00000000000000000000000000000000 %
b00000000000000000000000000001100 '
b00000000010101010010010000100011 (
b01010 +
b00101 ,
b00000000000000000000000000000000 /
b00000000000000000000000000000011 0
b00000000000000000000000000001000 1
b01000 2
03
b00000000000000000000000000001000 4
b00000000011100110000001010110011 5
b00000000000000000000000000000001 6
b00000000000000000000000000000010 7
b00000000000000000000000000000000 8
b00101 :
b00000000000000000000000000001000 <
b00000000000000000000000000000011 =
b00101 >
b00000000000000000000000000000100 @
b00000000000100110000001100010011 A
b00000000000000000000000000000001 C
b00110 D
b00000000000000000000000000000001 F
b00110 G
b00111 K
1L
b00000000000000000000000000000010 M
b00111 N
b00111 Q
1R
b00000000000000000000000000000010 S
b00000000000000000000000000010100 T
b00000 Y
1[
b00000000000000000000000000010000 ]
b00000000000000000000000000010000 ^
b0000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
0f
1i
0j
b0100011 l
b010 m
b0110011 1!
14!
05!
b00000000000000000000000000000001 P!
b00000000000000000000000000000010 Q!
b00000000000000000000000000000011 R!
b00000000000000000000000000000011 U!
b00000000000000000000000000000011 V!
b00000000000000000000000000000000 h!
1l!
#9
0l!
#10
b00000000000000000000000000011000 #
b00000000000000000000000000010100 $
b00000000000000000000000000010000 '
b00000000000000000000000000000000 (
0)
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
b00000000000000000000000000001100 4
b00000000010101010010010000100011 5
b00000000000000000000000000000000 6
b00000000000000000000000000000011 7
b00000000000000000000000000001000 8
b01000 :
0;
b00000000000000000000000000010100 <
b00000000000000000000000000001000 =
b01000 >
0?
b00000000000000000000000000001000 @
b00000000011100110000001010110011 A
b00000000000000000000000000000010 B
b00000000000000000000000000000011 C
b00101 D
b00000000000000000000000000000011 F
b00101 G
b00000000000000000000000000000100 J
b00110 K
b00000000000000000000000000000001 M
b00110 N
b00110 Q
b00000000000000000000000000000001 S
b00000000000000000000000000011000 T
b00000000000000000000000000010100 ]
b00000000000000000000000000010100 ^
0d
0e
0i
b0000000 l
b000 m
b00000000000000000000000000000010 u
b0100011 1!
b010 2!
04!
16!
0<!
0=!
1?!
b00000000000000000000000000000000 P!
b00000000000000000000000000001000 Q!
b00000000000000000000000000001000 R!
b11111111111111111111111111111000 S!
b00000000000000000000000000001000 U!
b00000000000000000000000000001000 V!
b00000000000000000000000000001000 h!
b0110011 i!
1l!
#11
0l!
#12
b00000000000000000000000000011100 #
b00000000000000000000000000011000 $
b00000000000000000000000000010100 '
b00000000000000000000000000010000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000 :
b00000000000000000000000000010000 <
b00000000000000000000000000000000 =
b00000 >
b00000000000000000000000000001100 @
b00000000010101010010010000100011 A
b00000000000000000000000000000011 B
b00000000000000000000000000001000 C
b01000 D
0E
b00000000000000000000000000001000 F
b01000 G
b00000000000000000000000000001000 J
b00101 K
b00000000000000000000000000000011 M
b00101 N
b00101 Q
b00000000000000000000000000000011 S
b00000000000000000000000000011100 T
b00000000000000000000000000011000 ]
b00000000000000000000000000011000 ^
b00000000000000000000000000000001 t
b0000000 1!
b000 2!
06!
1=!
0?!
0F!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
b00000000000000000000000000000000 S!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 V!
b00000000000000000000000000000000 W!
0^!
0_!
b00000000000000000000000000000000 h!
b0100011 i!
1j!
1l!
#13
0l!
#14
b00000000000000000000000000100000 #
b00000000000000000000000000011100 $
b00000000000000000000000000011000 '
b00000000000000000000000000010100 4
b00000000000000000000000000010100 <
b00000000000000000000000000010000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000 D
b00000000000000000000000000000000 F
b00000 G
b00000000000000000000000000001100 J
b01000 K
0L
b00000000000000000000000000001000 M
b01000 N
b00000 Q
0R
b00000000000000000000000000000000 S
b00000000000000000000000000100000 T
b00000000000000000000000000011100 ]
b00000000000000000000000000011100 ^
b00000000000000000000000000000011 s
b0000000 i!
0j!
1l!
#15
0l!
#16
b00000000000000000000000000100100 #
b00000000000000000000000000100000 $
b00000000000000000000000000011100 '
b00000000000000000000000000011000 4
b00000000000000000000000000011000 <
b00000000000000000000000000010100 @
b00000000000000000000000000010000 J
b00000 K
b00000000000000000000000000000000 M
b00000 N
b00000000000000000000000000100100 T
b00000000000000000000000000100000 ]
b00000000000000000000000000100000 ^
1l!
#17
0l!
#18
b00000000000000000000000000101000 #
b00000000000000000000000000100100 $
b00000000000000000000000000100000 '
b00000000000000000000000000011100 4
b00000000000000000000000000011100 <
b00000000000000000000000000011000 @
b00000000000000000000000000010100 J
b00000000000000000000000000101000 T
b00000000000000000000000000100100 ]
b00000000000000000000000000100100 ^
1l!
#19
0l!
